{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MKTb055AA1ni"
      },
      "source": [
        "**Importing libraries**"
      ],
      "id": "MKTb055AA1ni"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "73207d14",
        "outputId": "4a265557-466c-4f59-da0b-bfa460d4da7a"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "from sklearn.impute import SimpleImputer\n",
        "import numpy as np\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.model_selection import GridSearchCV\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.tree import DecisionTreeRegressor\n",
        "from sklearn.ensemble import VotingRegressor\n",
        "from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\n",
        "from sklearn.ensemble import StackingRegressor\n",
        "import xgboost as xgb\n",
        "from sklearn.model_selection import cross_val_score\n",
        "from sklearn.metrics import mean_absolute_error, mean_squared_error\n",
        "from google.colab import drive\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "drive.mount('/content/drive')"
      ],
      "id": "73207d14"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "VbgRvFx1C3Oi"
      },
      "source": [
        "## **players_21 dataset**"
      ],
      "id": "VbgRvFx1C3Oi"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "A0fPDtjkA4ps"
      },
      "source": [
        "**Data Loading and Exploration**"
      ],
      "id": "A0fPDtjkA4ps"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "704620b2"
      },
      "outputs": [],
      "source": [
        "players_21 = pd.read_csv('/content/drive/My Drive/Mid Sem Project/players_21.csv')"
      ],
      "id": "704620b2"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "a9354d09"
      },
      "outputs": [],
      "source": [
        "players_21 = pd.DataFrame(players_21)"
      ],
      "id": "a9354d09"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 721
        },
        "id": "4ff6a4e5",
        "outputId": "3173f79d-b51c-4523-a972-273441d54e0e",
        "scrolled": false
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-ca4e63c7-255c-4f03-bcf9-c68b0545238e\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>sofifa_id</th>\n",
              "      <th>player_url</th>\n",
              "      <th>short_name</th>\n",
              "      <th>long_name</th>\n",
              "      <th>player_positions</th>\n",
              "      <th>overall</th>\n",
              "      <th>potential</th>\n",
              "      <th>value_eur</th>\n",
              "      <th>wage_eur</th>\n",
              "      <th>age</th>\n",
              "      <th>...</th>\n",
              "      <th>lcb</th>\n",
              "      <th>cb</th>\n",
              "      <th>rcb</th>\n",
              "      <th>rb</th>\n",
              "      <th>gk</th>\n",
              "      <th>player_face_url</th>\n",
              "      <th>club_logo_url</th>\n",
              "      <th>club_flag_url</th>\n",
              "      <th>nation_logo_url</th>\n",
              "      <th>nation_flag_url</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>158023</td>\n",
              "      <td>https://sofifa.com/player/158023/lionel-messi/...</td>\n",
              "      <td>L. Messi</td>\n",
              "      <td>Lionel Andrés Messi Cuccittini</td>\n",
              "      <td>RW, ST, CF</td>\n",
              "      <td>93</td>\n",
              "      <td>93</td>\n",
              "      <td>103500000.0</td>\n",
              "      <td>560000.0</td>\n",
              "      <td>33</td>\n",
              "      <td>...</td>\n",
              "      <td>52+3</td>\n",
              "      <td>52+3</td>\n",
              "      <td>52+3</td>\n",
              "      <td>62+3</td>\n",
              "      <td>19+3</td>\n",
              "      <td>https://cdn.sofifa.net/players/158/023/21_120.png</td>\n",
              "      <td>https://cdn.sofifa.net/teams/241/60.png</td>\n",
              "      <td>https://cdn.sofifa.net/flags/es.png</td>\n",
              "      <td>https://cdn.sofifa.net/teams/1369/60.png</td>\n",
              "      <td>https://cdn.sofifa.net/flags/ar.png</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>20801</td>\n",
              "      <td>https://sofifa.com/player/20801/c-ronaldo-dos-...</td>\n",
              "      <td>Cristiano Ronaldo</td>\n",
              "      <td>Cristiano Ronaldo dos Santos Aveiro</td>\n",
              "      <td>ST, LW</td>\n",
              "      <td>92</td>\n",
              "      <td>92</td>\n",
              "      <td>63000000.0</td>\n",
              "      <td>220000.0</td>\n",
              "      <td>35</td>\n",
              "      <td>...</td>\n",
              "      <td>54+3</td>\n",
              "      <td>54+3</td>\n",
              "      <td>54+3</td>\n",
              "      <td>61+3</td>\n",
              "      <td>20+3</td>\n",
              "      <td>https://cdn.sofifa.net/players/020/801/21_120.png</td>\n",
              "      <td>https://cdn.sofifa.net/teams/45/60.png</td>\n",
              "      <td>https://cdn.sofifa.net/flags/it.png</td>\n",
              "      <td>https://cdn.sofifa.net/teams/1354/60.png</td>\n",
              "      <td>https://cdn.sofifa.net/flags/pt.png</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>188545</td>\n",
              "      <td>https://sofifa.com/player/188545/robert-lewand...</td>\n",
              "      <td>R. Lewandowski</td>\n",
              "      <td>Robert Lewandowski</td>\n",
              "      <td>ST</td>\n",
              "      <td>91</td>\n",
              "      <td>91</td>\n",
              "      <td>111000000.0</td>\n",
              "      <td>240000.0</td>\n",
              "      <td>31</td>\n",
              "      <td>...</td>\n",
              "      <td>60+3</td>\n",
              "      <td>60+3</td>\n",
              "      <td>60+3</td>\n",
              "      <td>61+3</td>\n",
              "      <td>19+3</td>\n",
              "      <td>https://cdn.sofifa.net/players/188/545/21_120.png</td>\n",
              "      <td>https://cdn.sofifa.net/teams/21/60.png</td>\n",
              "      <td>https://cdn.sofifa.net/flags/de.png</td>\n",
              "      <td>NaN</td>\n",
              "      <td>https://cdn.sofifa.net/flags/pl.png</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>190871</td>\n",
              "      <td>https://sofifa.com/player/190871/neymar-da-sil...</td>\n",
              "      <td>Neymar Jr</td>\n",
              "      <td>Neymar da Silva Santos Júnior</td>\n",
              "      <td>LW, CAM</td>\n",
              "      <td>91</td>\n",
              "      <td>91</td>\n",
              "      <td>132000000.0</td>\n",
              "      <td>270000.0</td>\n",
              "      <td>28</td>\n",
              "      <td>...</td>\n",
              "      <td>49+3</td>\n",
              "      <td>49+3</td>\n",
              "      <td>49+3</td>\n",
              "      <td>62+3</td>\n",
              "      <td>20+3</td>\n",
              "      <td>https://cdn.sofifa.net/players/190/871/21_120.png</td>\n",
              "      <td>https://cdn.sofifa.net/teams/73/60.png</td>\n",
              "      <td>https://cdn.sofifa.net/flags/fr.png</td>\n",
              "      <td>NaN</td>\n",
              "      <td>https://cdn.sofifa.net/flags/br.png</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>192985</td>\n",
              "      <td>https://sofifa.com/player/192985/kevin-de-bruy...</td>\n",
              "      <td>K. De Bruyne</td>\n",
              "      <td>Kevin De Bruyne</td>\n",
              "      <td>CAM, CM</td>\n",
              "      <td>91</td>\n",
              "      <td>91</td>\n",
              "      <td>129000000.0</td>\n",
              "      <td>370000.0</td>\n",
              "      <td>29</td>\n",
              "      <td>...</td>\n",
              "      <td>69+3</td>\n",
              "      <td>69+3</td>\n",
              "      <td>69+3</td>\n",
              "      <td>75+3</td>\n",
              "      <td>21+3</td>\n",
              "      <td>https://cdn.sofifa.net/players/192/985/21_120.png</td>\n",
              "      <td>https://cdn.sofifa.net/teams/10/60.png</td>\n",
              "      <td>https://cdn.sofifa.net/flags/gb-eng.png</td>\n",
              "      <td>https://cdn.sofifa.net/teams/1325/60.png</td>\n",
              "      <td>https://cdn.sofifa.net/flags/be.png</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18939</th>\n",
              "      <td>257710</td>\n",
              "      <td>https://sofifa.com/player/257710/mengxuan-zhan...</td>\n",
              "      <td>Zhang Mengxuan</td>\n",
              "      <td>张梦炫</td>\n",
              "      <td>CB</td>\n",
              "      <td>47</td>\n",
              "      <td>52</td>\n",
              "      <td>70000.0</td>\n",
              "      <td>1000.0</td>\n",
              "      <td>21</td>\n",
              "      <td>...</td>\n",
              "      <td>47+2</td>\n",
              "      <td>47+2</td>\n",
              "      <td>47+2</td>\n",
              "      <td>45+2</td>\n",
              "      <td>15+2</td>\n",
              "      <td>https://cdn.sofifa.net/players/257/710/21_120.png</td>\n",
              "      <td>https://cdn.sofifa.net/teams/112165/60.png</td>\n",
              "      <td>https://cdn.sofifa.net/flags/cn.png</td>\n",
              "      <td>NaN</td>\n",
              "      <td>https://cdn.sofifa.net/flags/cn.png</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18940</th>\n",
              "      <td>257933</td>\n",
              "      <td>https://sofifa.com/player/257933/wenzhuo-huang...</td>\n",
              "      <td>Huang Wenzhou</td>\n",
              "      <td>黄文卓</td>\n",
              "      <td>CM</td>\n",
              "      <td>47</td>\n",
              "      <td>53</td>\n",
              "      <td>70000.0</td>\n",
              "      <td>1000.0</td>\n",
              "      <td>21</td>\n",
              "      <td>...</td>\n",
              "      <td>46+2</td>\n",
              "      <td>46+2</td>\n",
              "      <td>46+2</td>\n",
              "      <td>47+2</td>\n",
              "      <td>15+2</td>\n",
              "      <td>https://cdn.sofifa.net/players/257/933/21_120.png</td>\n",
              "      <td>https://cdn.sofifa.net/teams/112540/60.png</td>\n",
              "      <td>https://cdn.sofifa.net/flags/cn.png</td>\n",
              "      <td>NaN</td>\n",
              "      <td>https://cdn.sofifa.net/flags/cn.png</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18941</th>\n",
              "      <td>257936</td>\n",
              "      <td>https://sofifa.com/player/257936/yue-song/210002</td>\n",
              "      <td>Song Yue</td>\n",
              "      <td>宋岳</td>\n",
              "      <td>CM</td>\n",
              "      <td>47</td>\n",
              "      <td>47</td>\n",
              "      <td>45000.0</td>\n",
              "      <td>2000.0</td>\n",
              "      <td>28</td>\n",
              "      <td>...</td>\n",
              "      <td>46+1</td>\n",
              "      <td>46+1</td>\n",
              "      <td>46+1</td>\n",
              "      <td>47</td>\n",
              "      <td>11+2</td>\n",
              "      <td>https://cdn.sofifa.net/players/257/936/21_120.png</td>\n",
              "      <td>https://cdn.sofifa.net/teams/111774/60.png</td>\n",
              "      <td>https://cdn.sofifa.net/flags/cn.png</td>\n",
              "      <td>NaN</td>\n",
              "      <td>https://cdn.sofifa.net/flags/cn.png</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18942</th>\n",
              "      <td>258736</td>\n",
              "      <td>https://sofifa.com/player/258736/vani-da-silva...</td>\n",
              "      <td>V. Da Silva</td>\n",
              "      <td>Ivanilson Loforte Tique Da Silva</td>\n",
              "      <td>ST</td>\n",
              "      <td>47</td>\n",
              "      <td>67</td>\n",
              "      <td>130000.0</td>\n",
              "      <td>500.0</td>\n",
              "      <td>17</td>\n",
              "      <td>...</td>\n",
              "      <td>26+2</td>\n",
              "      <td>26+2</td>\n",
              "      <td>26+2</td>\n",
              "      <td>33+2</td>\n",
              "      <td>14+2</td>\n",
              "      <td>https://cdn.sofifa.net/players/258/736/21_120.png</td>\n",
              "      <td>https://cdn.sofifa.net/teams/1920/60.png</td>\n",
              "      <td>https://cdn.sofifa.net/flags/gb-eng.png</td>\n",
              "      <td>NaN</td>\n",
              "      <td>https://cdn.sofifa.net/flags/gb-eng.png</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18943</th>\n",
              "      <td>258760</td>\n",
              "      <td>https://sofifa.com/player/258760/ben-hough/210002</td>\n",
              "      <td>B. Hough</td>\n",
              "      <td>Ben Hough</td>\n",
              "      <td>CM</td>\n",
              "      <td>47</td>\n",
              "      <td>67</td>\n",
              "      <td>130000.0</td>\n",
              "      <td>500.0</td>\n",
              "      <td>17</td>\n",
              "      <td>...</td>\n",
              "      <td>41+2</td>\n",
              "      <td>41+2</td>\n",
              "      <td>41+2</td>\n",
              "      <td>43+2</td>\n",
              "      <td>14+2</td>\n",
              "      <td>https://cdn.sofifa.net/players/258/760/21_120.png</td>\n",
              "      <td>https://cdn.sofifa.net/teams/1920/60.png</td>\n",
              "      <td>https://cdn.sofifa.net/flags/gb-eng.png</td>\n",
              "      <td>NaN</td>\n",
              "      <td>https://cdn.sofifa.net/flags/gb-eng.png</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>18944 rows × 110 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ca4e63c7-255c-4f03-bcf9-c68b0545238e')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-ca4e63c7-255c-4f03-bcf9-c68b0545238e button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-ca4e63c7-255c-4f03-bcf9-c68b0545238e');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-2d23e18b-e870-4290-b873-90c220f8dbf7\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2d23e18b-e870-4290-b873-90c220f8dbf7')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-2d23e18b-e870-4290-b873-90c220f8dbf7 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "       sofifa_id                                         player_url  \\\n",
              "0         158023  https://sofifa.com/player/158023/lionel-messi/...   \n",
              "1          20801  https://sofifa.com/player/20801/c-ronaldo-dos-...   \n",
              "2         188545  https://sofifa.com/player/188545/robert-lewand...   \n",
              "3         190871  https://sofifa.com/player/190871/neymar-da-sil...   \n",
              "4         192985  https://sofifa.com/player/192985/kevin-de-bruy...   \n",
              "...          ...                                                ...   \n",
              "18939     257710  https://sofifa.com/player/257710/mengxuan-zhan...   \n",
              "18940     257933  https://sofifa.com/player/257933/wenzhuo-huang...   \n",
              "18941     257936   https://sofifa.com/player/257936/yue-song/210002   \n",
              "18942     258736  https://sofifa.com/player/258736/vani-da-silva...   \n",
              "18943     258760  https://sofifa.com/player/258760/ben-hough/210002   \n",
              "\n",
              "              short_name                            long_name  \\\n",
              "0               L. Messi       Lionel Andrés Messi Cuccittini   \n",
              "1      Cristiano Ronaldo  Cristiano Ronaldo dos Santos Aveiro   \n",
              "2         R. Lewandowski                   Robert Lewandowski   \n",
              "3              Neymar Jr        Neymar da Silva Santos Júnior   \n",
              "4           K. De Bruyne                      Kevin De Bruyne   \n",
              "...                  ...                                  ...   \n",
              "18939     Zhang Mengxuan                                  张梦炫   \n",
              "18940      Huang Wenzhou                                  黄文卓   \n",
              "18941           Song Yue                                   宋岳   \n",
              "18942        V. Da Silva     Ivanilson Loforte Tique Da Silva   \n",
              "18943           B. Hough                            Ben Hough   \n",
              "\n",
              "      player_positions  overall  potential    value_eur  wage_eur  age  ...  \\\n",
              "0           RW, ST, CF       93         93  103500000.0  560000.0   33  ...   \n",
              "1               ST, LW       92         92   63000000.0  220000.0   35  ...   \n",
              "2                   ST       91         91  111000000.0  240000.0   31  ...   \n",
              "3              LW, CAM       91         91  132000000.0  270000.0   28  ...   \n",
              "4              CAM, CM       91         91  129000000.0  370000.0   29  ...   \n",
              "...                ...      ...        ...          ...       ...  ...  ...   \n",
              "18939               CB       47         52      70000.0    1000.0   21  ...   \n",
              "18940               CM       47         53      70000.0    1000.0   21  ...   \n",
              "18941               CM       47         47      45000.0    2000.0   28  ...   \n",
              "18942               ST       47         67     130000.0     500.0   17  ...   \n",
              "18943               CM       47         67     130000.0     500.0   17  ...   \n",
              "\n",
              "        lcb    cb   rcb    rb    gk  \\\n",
              "0      52+3  52+3  52+3  62+3  19+3   \n",
              "1      54+3  54+3  54+3  61+3  20+3   \n",
              "2      60+3  60+3  60+3  61+3  19+3   \n",
              "3      49+3  49+3  49+3  62+3  20+3   \n",
              "4      69+3  69+3  69+3  75+3  21+3   \n",
              "...     ...   ...   ...   ...   ...   \n",
              "18939  47+2  47+2  47+2  45+2  15+2   \n",
              "18940  46+2  46+2  46+2  47+2  15+2   \n",
              "18941  46+1  46+1  46+1    47  11+2   \n",
              "18942  26+2  26+2  26+2  33+2  14+2   \n",
              "18943  41+2  41+2  41+2  43+2  14+2   \n",
              "\n",
              "                                         player_face_url  \\\n",
              "0      https://cdn.sofifa.net/players/158/023/21_120.png   \n",
              "1      https://cdn.sofifa.net/players/020/801/21_120.png   \n",
              "2      https://cdn.sofifa.net/players/188/545/21_120.png   \n",
              "3      https://cdn.sofifa.net/players/190/871/21_120.png   \n",
              "4      https://cdn.sofifa.net/players/192/985/21_120.png   \n",
              "...                                                  ...   \n",
              "18939  https://cdn.sofifa.net/players/257/710/21_120.png   \n",
              "18940  https://cdn.sofifa.net/players/257/933/21_120.png   \n",
              "18941  https://cdn.sofifa.net/players/257/936/21_120.png   \n",
              "18942  https://cdn.sofifa.net/players/258/736/21_120.png   \n",
              "18943  https://cdn.sofifa.net/players/258/760/21_120.png   \n",
              "\n",
              "                                    club_logo_url  \\\n",
              "0         https://cdn.sofifa.net/teams/241/60.png   \n",
              "1          https://cdn.sofifa.net/teams/45/60.png   \n",
              "2          https://cdn.sofifa.net/teams/21/60.png   \n",
              "3          https://cdn.sofifa.net/teams/73/60.png   \n",
              "4          https://cdn.sofifa.net/teams/10/60.png   \n",
              "...                                           ...   \n",
              "18939  https://cdn.sofifa.net/teams/112165/60.png   \n",
              "18940  https://cdn.sofifa.net/teams/112540/60.png   \n",
              "18941  https://cdn.sofifa.net/teams/111774/60.png   \n",
              "18942    https://cdn.sofifa.net/teams/1920/60.png   \n",
              "18943    https://cdn.sofifa.net/teams/1920/60.png   \n",
              "\n",
              "                                 club_flag_url  \\\n",
              "0          https://cdn.sofifa.net/flags/es.png   \n",
              "1          https://cdn.sofifa.net/flags/it.png   \n",
              "2          https://cdn.sofifa.net/flags/de.png   \n",
              "3          https://cdn.sofifa.net/flags/fr.png   \n",
              "4      https://cdn.sofifa.net/flags/gb-eng.png   \n",
              "...                                        ...   \n",
              "18939      https://cdn.sofifa.net/flags/cn.png   \n",
              "18940      https://cdn.sofifa.net/flags/cn.png   \n",
              "18941      https://cdn.sofifa.net/flags/cn.png   \n",
              "18942  https://cdn.sofifa.net/flags/gb-eng.png   \n",
              "18943  https://cdn.sofifa.net/flags/gb-eng.png   \n",
              "\n",
              "                                nation_logo_url  \\\n",
              "0      https://cdn.sofifa.net/teams/1369/60.png   \n",
              "1      https://cdn.sofifa.net/teams/1354/60.png   \n",
              "2                                           NaN   \n",
              "3                                           NaN   \n",
              "4      https://cdn.sofifa.net/teams/1325/60.png   \n",
              "...                                         ...   \n",
              "18939                                       NaN   \n",
              "18940                                       NaN   \n",
              "18941                                       NaN   \n",
              "18942                                       NaN   \n",
              "18943                                       NaN   \n",
              "\n",
              "                               nation_flag_url  \n",
              "0          https://cdn.sofifa.net/flags/ar.png  \n",
              "1          https://cdn.sofifa.net/flags/pt.png  \n",
              "2          https://cdn.sofifa.net/flags/pl.png  \n",
              "3          https://cdn.sofifa.net/flags/br.png  \n",
              "4          https://cdn.sofifa.net/flags/be.png  \n",
              "...                                        ...  \n",
              "18939      https://cdn.sofifa.net/flags/cn.png  \n",
              "18940      https://cdn.sofifa.net/flags/cn.png  \n",
              "18941      https://cdn.sofifa.net/flags/cn.png  \n",
              "18942  https://cdn.sofifa.net/flags/gb-eng.png  \n",
              "18943  https://cdn.sofifa.net/flags/gb-eng.png  \n",
              "\n",
              "[18944 rows x 110 columns]"
            ]
          },
          "execution_count": 4,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "players_21"
      ],
      "id": "4ff6a4e5"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 429
        },
        "id": "1540aefd",
        "outputId": "5b1a3569-9b53-4bf5-8838-a33acedfa127",
        "scrolled": true
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-44127efd-b177-40fc-b1ac-23dd1723f792\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>sofifa_id</th>\n",
              "      <th>player_url</th>\n",
              "      <th>short_name</th>\n",
              "      <th>long_name</th>\n",
              "      <th>player_positions</th>\n",
              "      <th>overall</th>\n",
              "      <th>potential</th>\n",
              "      <th>value_eur</th>\n",
              "      <th>wage_eur</th>\n",
              "      <th>age</th>\n",
              "      <th>...</th>\n",
              "      <th>lcb</th>\n",
              "      <th>cb</th>\n",
              "      <th>rcb</th>\n",
              "      <th>rb</th>\n",
              "      <th>gk</th>\n",
              "      <th>player_face_url</th>\n",
              "      <th>club_logo_url</th>\n",
              "      <th>club_flag_url</th>\n",
              "      <th>nation_logo_url</th>\n",
              "      <th>nation_flag_url</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>158023</td>\n",
              "      <td>https://sofifa.com/player/158023/lionel-messi/...</td>\n",
              "      <td>L. Messi</td>\n",
              "      <td>Lionel Andrés Messi Cuccittini</td>\n",
              "      <td>RW, ST, CF</td>\n",
              "      <td>93</td>\n",
              "      <td>93</td>\n",
              "      <td>103500000.0</td>\n",
              "      <td>560000.0</td>\n",
              "      <td>33</td>\n",
              "      <td>...</td>\n",
              "      <td>52+3</td>\n",
              "      <td>52+3</td>\n",
              "      <td>52+3</td>\n",
              "      <td>62+3</td>\n",
              "      <td>19+3</td>\n",
              "      <td>https://cdn.sofifa.net/players/158/023/21_120.png</td>\n",
              "      <td>https://cdn.sofifa.net/teams/241/60.png</td>\n",
              "      <td>https://cdn.sofifa.net/flags/es.png</td>\n",
              "      <td>https://cdn.sofifa.net/teams/1369/60.png</td>\n",
              "      <td>https://cdn.sofifa.net/flags/ar.png</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>20801</td>\n",
              "      <td>https://sofifa.com/player/20801/c-ronaldo-dos-...</td>\n",
              "      <td>Cristiano Ronaldo</td>\n",
              "      <td>Cristiano Ronaldo dos Santos Aveiro</td>\n",
              "      <td>ST, LW</td>\n",
              "      <td>92</td>\n",
              "      <td>92</td>\n",
              "      <td>63000000.0</td>\n",
              "      <td>220000.0</td>\n",
              "      <td>35</td>\n",
              "      <td>...</td>\n",
              "      <td>54+3</td>\n",
              "      <td>54+3</td>\n",
              "      <td>54+3</td>\n",
              "      <td>61+3</td>\n",
              "      <td>20+3</td>\n",
              "      <td>https://cdn.sofifa.net/players/020/801/21_120.png</td>\n",
              "      <td>https://cdn.sofifa.net/teams/45/60.png</td>\n",
              "      <td>https://cdn.sofifa.net/flags/it.png</td>\n",
              "      <td>https://cdn.sofifa.net/teams/1354/60.png</td>\n",
              "      <td>https://cdn.sofifa.net/flags/pt.png</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>188545</td>\n",
              "      <td>https://sofifa.com/player/188545/robert-lewand...</td>\n",
              "      <td>R. Lewandowski</td>\n",
              "      <td>Robert Lewandowski</td>\n",
              "      <td>ST</td>\n",
              "      <td>91</td>\n",
              "      <td>91</td>\n",
              "      <td>111000000.0</td>\n",
              "      <td>240000.0</td>\n",
              "      <td>31</td>\n",
              "      <td>...</td>\n",
              "      <td>60+3</td>\n",
              "      <td>60+3</td>\n",
              "      <td>60+3</td>\n",
              "      <td>61+3</td>\n",
              "      <td>19+3</td>\n",
              "      <td>https://cdn.sofifa.net/players/188/545/21_120.png</td>\n",
              "      <td>https://cdn.sofifa.net/teams/21/60.png</td>\n",
              "      <td>https://cdn.sofifa.net/flags/de.png</td>\n",
              "      <td>NaN</td>\n",
              "      <td>https://cdn.sofifa.net/flags/pl.png</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>190871</td>\n",
              "      <td>https://sofifa.com/player/190871/neymar-da-sil...</td>\n",
              "      <td>Neymar Jr</td>\n",
              "      <td>Neymar da Silva Santos Júnior</td>\n",
              "      <td>LW, CAM</td>\n",
              "      <td>91</td>\n",
              "      <td>91</td>\n",
              "      <td>132000000.0</td>\n",
              "      <td>270000.0</td>\n",
              "      <td>28</td>\n",
              "      <td>...</td>\n",
              "      <td>49+3</td>\n",
              "      <td>49+3</td>\n",
              "      <td>49+3</td>\n",
              "      <td>62+3</td>\n",
              "      <td>20+3</td>\n",
              "      <td>https://cdn.sofifa.net/players/190/871/21_120.png</td>\n",
              "      <td>https://cdn.sofifa.net/teams/73/60.png</td>\n",
              "      <td>https://cdn.sofifa.net/flags/fr.png</td>\n",
              "      <td>NaN</td>\n",
              "      <td>https://cdn.sofifa.net/flags/br.png</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>192985</td>\n",
              "      <td>https://sofifa.com/player/192985/kevin-de-bruy...</td>\n",
              "      <td>K. De Bruyne</td>\n",
              "      <td>Kevin De Bruyne</td>\n",
              "      <td>CAM, CM</td>\n",
              "      <td>91</td>\n",
              "      <td>91</td>\n",
              "      <td>129000000.0</td>\n",
              "      <td>370000.0</td>\n",
              "      <td>29</td>\n",
              "      <td>...</td>\n",
              "      <td>69+3</td>\n",
              "      <td>69+3</td>\n",
              "      <td>69+3</td>\n",
              "      <td>75+3</td>\n",
              "      <td>21+3</td>\n",
              "      <td>https://cdn.sofifa.net/players/192/985/21_120.png</td>\n",
              "      <td>https://cdn.sofifa.net/teams/10/60.png</td>\n",
              "      <td>https://cdn.sofifa.net/flags/gb-eng.png</td>\n",
              "      <td>https://cdn.sofifa.net/teams/1325/60.png</td>\n",
              "      <td>https://cdn.sofifa.net/flags/be.png</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 110 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-44127efd-b177-40fc-b1ac-23dd1723f792')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-44127efd-b177-40fc-b1ac-23dd1723f792 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-44127efd-b177-40fc-b1ac-23dd1723f792');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-0a747f94-f207-40c0-9ee6-4a0b61a41093\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0a747f94-f207-40c0-9ee6-4a0b61a41093')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-0a747f94-f207-40c0-9ee6-4a0b61a41093 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "   sofifa_id                                         player_url  \\\n",
              "0     158023  https://sofifa.com/player/158023/lionel-messi/...   \n",
              "1      20801  https://sofifa.com/player/20801/c-ronaldo-dos-...   \n",
              "2     188545  https://sofifa.com/player/188545/robert-lewand...   \n",
              "3     190871  https://sofifa.com/player/190871/neymar-da-sil...   \n",
              "4     192985  https://sofifa.com/player/192985/kevin-de-bruy...   \n",
              "\n",
              "          short_name                            long_name player_positions  \\\n",
              "0           L. Messi       Lionel Andrés Messi Cuccittini       RW, ST, CF   \n",
              "1  Cristiano Ronaldo  Cristiano Ronaldo dos Santos Aveiro           ST, LW   \n",
              "2     R. Lewandowski                   Robert Lewandowski               ST   \n",
              "3          Neymar Jr        Neymar da Silva Santos Júnior          LW, CAM   \n",
              "4       K. De Bruyne                      Kevin De Bruyne          CAM, CM   \n",
              "\n",
              "   overall  potential    value_eur  wage_eur  age  ...   lcb    cb   rcb  \\\n",
              "0       93         93  103500000.0  560000.0   33  ...  52+3  52+3  52+3   \n",
              "1       92         92   63000000.0  220000.0   35  ...  54+3  54+3  54+3   \n",
              "2       91         91  111000000.0  240000.0   31  ...  60+3  60+3  60+3   \n",
              "3       91         91  132000000.0  270000.0   28  ...  49+3  49+3  49+3   \n",
              "4       91         91  129000000.0  370000.0   29  ...  69+3  69+3  69+3   \n",
              "\n",
              "     rb    gk                                    player_face_url  \\\n",
              "0  62+3  19+3  https://cdn.sofifa.net/players/158/023/21_120.png   \n",
              "1  61+3  20+3  https://cdn.sofifa.net/players/020/801/21_120.png   \n",
              "2  61+3  19+3  https://cdn.sofifa.net/players/188/545/21_120.png   \n",
              "3  62+3  20+3  https://cdn.sofifa.net/players/190/871/21_120.png   \n",
              "4  75+3  21+3  https://cdn.sofifa.net/players/192/985/21_120.png   \n",
              "\n",
              "                             club_logo_url  \\\n",
              "0  https://cdn.sofifa.net/teams/241/60.png   \n",
              "1   https://cdn.sofifa.net/teams/45/60.png   \n",
              "2   https://cdn.sofifa.net/teams/21/60.png   \n",
              "3   https://cdn.sofifa.net/teams/73/60.png   \n",
              "4   https://cdn.sofifa.net/teams/10/60.png   \n",
              "\n",
              "                             club_flag_url  \\\n",
              "0      https://cdn.sofifa.net/flags/es.png   \n",
              "1      https://cdn.sofifa.net/flags/it.png   \n",
              "2      https://cdn.sofifa.net/flags/de.png   \n",
              "3      https://cdn.sofifa.net/flags/fr.png   \n",
              "4  https://cdn.sofifa.net/flags/gb-eng.png   \n",
              "\n",
              "                            nation_logo_url  \\\n",
              "0  https://cdn.sofifa.net/teams/1369/60.png   \n",
              "1  https://cdn.sofifa.net/teams/1354/60.png   \n",
              "2                                       NaN   \n",
              "3                                       NaN   \n",
              "4  https://cdn.sofifa.net/teams/1325/60.png   \n",
              "\n",
              "                       nation_flag_url  \n",
              "0  https://cdn.sofifa.net/flags/ar.png  \n",
              "1  https://cdn.sofifa.net/flags/pt.png  \n",
              "2  https://cdn.sofifa.net/flags/pl.png  \n",
              "3  https://cdn.sofifa.net/flags/br.png  \n",
              "4  https://cdn.sofifa.net/flags/be.png  \n",
              "\n",
              "[5 rows x 110 columns]"
            ]
          },
          "execution_count": 5,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "players_21.head()\n"
      ],
      "id": "1540aefd"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ed91811c"
      },
      "outputs": [],
      "source": [
        "players_21.set_index('short_name', inplace=True)\n"
      ],
      "id": "ed91811c"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 752
        },
        "id": "74df4992",
        "outputId": "7f19c2d0-bf07-461c-d62e-733e257e573f"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-3f88c40b-e124-4357-980f-74a23a0d154c\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>sofifa_id</th>\n",
              "      <th>player_url</th>\n",
              "      <th>long_name</th>\n",
              "      <th>player_positions</th>\n",
              "      <th>overall</th>\n",
              "      <th>potential</th>\n",
              "      <th>value_eur</th>\n",
              "      <th>wage_eur</th>\n",
              "      <th>age</th>\n",
              "      <th>dob</th>\n",
              "      <th>...</th>\n",
              "      <th>lcb</th>\n",
              "      <th>cb</th>\n",
              "      <th>rcb</th>\n",
              "      <th>rb</th>\n",
              "      <th>gk</th>\n",
              "      <th>player_face_url</th>\n",
              "      <th>club_logo_url</th>\n",
              "      <th>club_flag_url</th>\n",
              "      <th>nation_logo_url</th>\n",
              "      <th>nation_flag_url</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>short_name</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>L. Messi</th>\n",
              "      <td>158023</td>\n",
              "      <td>https://sofifa.com/player/158023/lionel-messi/...</td>\n",
              "      <td>Lionel Andrés Messi Cuccittini</td>\n",
              "      <td>RW, ST, CF</td>\n",
              "      <td>93</td>\n",
              "      <td>93</td>\n",
              "      <td>103500000.0</td>\n",
              "      <td>560000.0</td>\n",
              "      <td>33</td>\n",
              "      <td>1987-06-24</td>\n",
              "      <td>...</td>\n",
              "      <td>52+3</td>\n",
              "      <td>52+3</td>\n",
              "      <td>52+3</td>\n",
              "      <td>62+3</td>\n",
              "      <td>19+3</td>\n",
              "      <td>https://cdn.sofifa.net/players/158/023/21_120.png</td>\n",
              "      <td>https://cdn.sofifa.net/teams/241/60.png</td>\n",
              "      <td>https://cdn.sofifa.net/flags/es.png</td>\n",
              "      <td>https://cdn.sofifa.net/teams/1369/60.png</td>\n",
              "      <td>https://cdn.sofifa.net/flags/ar.png</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Cristiano Ronaldo</th>\n",
              "      <td>20801</td>\n",
              "      <td>https://sofifa.com/player/20801/c-ronaldo-dos-...</td>\n",
              "      <td>Cristiano Ronaldo dos Santos Aveiro</td>\n",
              "      <td>ST, LW</td>\n",
              "      <td>92</td>\n",
              "      <td>92</td>\n",
              "      <td>63000000.0</td>\n",
              "      <td>220000.0</td>\n",
              "      <td>35</td>\n",
              "      <td>1985-02-05</td>\n",
              "      <td>...</td>\n",
              "      <td>54+3</td>\n",
              "      <td>54+3</td>\n",
              "      <td>54+3</td>\n",
              "      <td>61+3</td>\n",
              "      <td>20+3</td>\n",
              "      <td>https://cdn.sofifa.net/players/020/801/21_120.png</td>\n",
              "      <td>https://cdn.sofifa.net/teams/45/60.png</td>\n",
              "      <td>https://cdn.sofifa.net/flags/it.png</td>\n",
              "      <td>https://cdn.sofifa.net/teams/1354/60.png</td>\n",
              "      <td>https://cdn.sofifa.net/flags/pt.png</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>R. Lewandowski</th>\n",
              "      <td>188545</td>\n",
              "      <td>https://sofifa.com/player/188545/robert-lewand...</td>\n",
              "      <td>Robert Lewandowski</td>\n",
              "      <td>ST</td>\n",
              "      <td>91</td>\n",
              "      <td>91</td>\n",
              "      <td>111000000.0</td>\n",
              "      <td>240000.0</td>\n",
              "      <td>31</td>\n",
              "      <td>1988-08-21</td>\n",
              "      <td>...</td>\n",
              "      <td>60+3</td>\n",
              "      <td>60+3</td>\n",
              "      <td>60+3</td>\n",
              "      <td>61+3</td>\n",
              "      <td>19+3</td>\n",
              "      <td>https://cdn.sofifa.net/players/188/545/21_120.png</td>\n",
              "      <td>https://cdn.sofifa.net/teams/21/60.png</td>\n",
              "      <td>https://cdn.sofifa.net/flags/de.png</td>\n",
              "      <td>NaN</td>\n",
              "      <td>https://cdn.sofifa.net/flags/pl.png</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Neymar Jr</th>\n",
              "      <td>190871</td>\n",
              "      <td>https://sofifa.com/player/190871/neymar-da-sil...</td>\n",
              "      <td>Neymar da Silva Santos Júnior</td>\n",
              "      <td>LW, CAM</td>\n",
              "      <td>91</td>\n",
              "      <td>91</td>\n",
              "      <td>132000000.0</td>\n",
              "      <td>270000.0</td>\n",
              "      <td>28</td>\n",
              "      <td>1992-02-05</td>\n",
              "      <td>...</td>\n",
              "      <td>49+3</td>\n",
              "      <td>49+3</td>\n",
              "      <td>49+3</td>\n",
              "      <td>62+3</td>\n",
              "      <td>20+3</td>\n",
              "      <td>https://cdn.sofifa.net/players/190/871/21_120.png</td>\n",
              "      <td>https://cdn.sofifa.net/teams/73/60.png</td>\n",
              "      <td>https://cdn.sofifa.net/flags/fr.png</td>\n",
              "      <td>NaN</td>\n",
              "      <td>https://cdn.sofifa.net/flags/br.png</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>K. De Bruyne</th>\n",
              "      <td>192985</td>\n",
              "      <td>https://sofifa.com/player/192985/kevin-de-bruy...</td>\n",
              "      <td>Kevin De Bruyne</td>\n",
              "      <td>CAM, CM</td>\n",
              "      <td>91</td>\n",
              "      <td>91</td>\n",
              "      <td>129000000.0</td>\n",
              "      <td>370000.0</td>\n",
              "      <td>29</td>\n",
              "      <td>1991-06-28</td>\n",
              "      <td>...</td>\n",
              "      <td>69+3</td>\n",
              "      <td>69+3</td>\n",
              "      <td>69+3</td>\n",
              "      <td>75+3</td>\n",
              "      <td>21+3</td>\n",
              "      <td>https://cdn.sofifa.net/players/192/985/21_120.png</td>\n",
              "      <td>https://cdn.sofifa.net/teams/10/60.png</td>\n",
              "      <td>https://cdn.sofifa.net/flags/gb-eng.png</td>\n",
              "      <td>https://cdn.sofifa.net/teams/1325/60.png</td>\n",
              "      <td>https://cdn.sofifa.net/flags/be.png</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Zhang Mengxuan</th>\n",
              "      <td>257710</td>\n",
              "      <td>https://sofifa.com/player/257710/mengxuan-zhan...</td>\n",
              "      <td>张梦炫</td>\n",
              "      <td>CB</td>\n",
              "      <td>47</td>\n",
              "      <td>52</td>\n",
              "      <td>70000.0</td>\n",
              "      <td>1000.0</td>\n",
              "      <td>21</td>\n",
              "      <td>1999-04-26</td>\n",
              "      <td>...</td>\n",
              "      <td>47+2</td>\n",
              "      <td>47+2</td>\n",
              "      <td>47+2</td>\n",
              "      <td>45+2</td>\n",
              "      <td>15+2</td>\n",
              "      <td>https://cdn.sofifa.net/players/257/710/21_120.png</td>\n",
              "      <td>https://cdn.sofifa.net/teams/112165/60.png</td>\n",
              "      <td>https://cdn.sofifa.net/flags/cn.png</td>\n",
              "      <td>NaN</td>\n",
              "      <td>https://cdn.sofifa.net/flags/cn.png</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Huang Wenzhou</th>\n",
              "      <td>257933</td>\n",
              "      <td>https://sofifa.com/player/257933/wenzhuo-huang...</td>\n",
              "      <td>黄文卓</td>\n",
              "      <td>CM</td>\n",
              "      <td>47</td>\n",
              "      <td>53</td>\n",
              "      <td>70000.0</td>\n",
              "      <td>1000.0</td>\n",
              "      <td>21</td>\n",
              "      <td>1999-01-07</td>\n",
              "      <td>...</td>\n",
              "      <td>46+2</td>\n",
              "      <td>46+2</td>\n",
              "      <td>46+2</td>\n",
              "      <td>47+2</td>\n",
              "      <td>15+2</td>\n",
              "      <td>https://cdn.sofifa.net/players/257/933/21_120.png</td>\n",
              "      <td>https://cdn.sofifa.net/teams/112540/60.png</td>\n",
              "      <td>https://cdn.sofifa.net/flags/cn.png</td>\n",
              "      <td>NaN</td>\n",
              "      <td>https://cdn.sofifa.net/flags/cn.png</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Song Yue</th>\n",
              "      <td>257936</td>\n",
              "      <td>https://sofifa.com/player/257936/yue-song/210002</td>\n",
              "      <td>宋岳</td>\n",
              "      <td>CM</td>\n",
              "      <td>47</td>\n",
              "      <td>47</td>\n",
              "      <td>45000.0</td>\n",
              "      <td>2000.0</td>\n",
              "      <td>28</td>\n",
              "      <td>1991-11-20</td>\n",
              "      <td>...</td>\n",
              "      <td>46+1</td>\n",
              "      <td>46+1</td>\n",
              "      <td>46+1</td>\n",
              "      <td>47</td>\n",
              "      <td>11+2</td>\n",
              "      <td>https://cdn.sofifa.net/players/257/936/21_120.png</td>\n",
              "      <td>https://cdn.sofifa.net/teams/111774/60.png</td>\n",
              "      <td>https://cdn.sofifa.net/flags/cn.png</td>\n",
              "      <td>NaN</td>\n",
              "      <td>https://cdn.sofifa.net/flags/cn.png</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>V. Da Silva</th>\n",
              "      <td>258736</td>\n",
              "      <td>https://sofifa.com/player/258736/vani-da-silva...</td>\n",
              "      <td>Ivanilson Loforte Tique Da Silva</td>\n",
              "      <td>ST</td>\n",
              "      <td>47</td>\n",
              "      <td>67</td>\n",
              "      <td>130000.0</td>\n",
              "      <td>500.0</td>\n",
              "      <td>17</td>\n",
              "      <td>2003-03-30</td>\n",
              "      <td>...</td>\n",
              "      <td>26+2</td>\n",
              "      <td>26+2</td>\n",
              "      <td>26+2</td>\n",
              "      <td>33+2</td>\n",
              "      <td>14+2</td>\n",
              "      <td>https://cdn.sofifa.net/players/258/736/21_120.png</td>\n",
              "      <td>https://cdn.sofifa.net/teams/1920/60.png</td>\n",
              "      <td>https://cdn.sofifa.net/flags/gb-eng.png</td>\n",
              "      <td>NaN</td>\n",
              "      <td>https://cdn.sofifa.net/flags/gb-eng.png</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>B. Hough</th>\n",
              "      <td>258760</td>\n",
              "      <td>https://sofifa.com/player/258760/ben-hough/210002</td>\n",
              "      <td>Ben Hough</td>\n",
              "      <td>CM</td>\n",
              "      <td>47</td>\n",
              "      <td>67</td>\n",
              "      <td>130000.0</td>\n",
              "      <td>500.0</td>\n",
              "      <td>17</td>\n",
              "      <td>2003-06-22</td>\n",
              "      <td>...</td>\n",
              "      <td>41+2</td>\n",
              "      <td>41+2</td>\n",
              "      <td>41+2</td>\n",
              "      <td>43+2</td>\n",
              "      <td>14+2</td>\n",
              "      <td>https://cdn.sofifa.net/players/258/760/21_120.png</td>\n",
              "      <td>https://cdn.sofifa.net/teams/1920/60.png</td>\n",
              "      <td>https://cdn.sofifa.net/flags/gb-eng.png</td>\n",
              "      <td>NaN</td>\n",
              "      <td>https://cdn.sofifa.net/flags/gb-eng.png</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>18944 rows × 109 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3f88c40b-e124-4357-980f-74a23a0d154c')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-3f88c40b-e124-4357-980f-74a23a0d154c button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-3f88c40b-e124-4357-980f-74a23a0d154c');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-2b9f0383-abda-45ac-a1f0-283e9851c7d8\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2b9f0383-abda-45ac-a1f0-283e9851c7d8')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-2b9f0383-abda-45ac-a1f0-283e9851c7d8 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "                   sofifa_id  \\\n",
              "short_name                     \n",
              "L. Messi              158023   \n",
              "Cristiano Ronaldo      20801   \n",
              "R. Lewandowski        188545   \n",
              "Neymar Jr             190871   \n",
              "K. De Bruyne          192985   \n",
              "...                      ...   \n",
              "Zhang Mengxuan        257710   \n",
              "Huang Wenzhou         257933   \n",
              "Song Yue              257936   \n",
              "V. Da Silva           258736   \n",
              "B. Hough              258760   \n",
              "\n",
              "                                                          player_url  \\\n",
              "short_name                                                             \n",
              "L. Messi           https://sofifa.com/player/158023/lionel-messi/...   \n",
              "Cristiano Ronaldo  https://sofifa.com/player/20801/c-ronaldo-dos-...   \n",
              "R. Lewandowski     https://sofifa.com/player/188545/robert-lewand...   \n",
              "Neymar Jr          https://sofifa.com/player/190871/neymar-da-sil...   \n",
              "K. De Bruyne       https://sofifa.com/player/192985/kevin-de-bruy...   \n",
              "...                                                              ...   \n",
              "Zhang Mengxuan     https://sofifa.com/player/257710/mengxuan-zhan...   \n",
              "Huang Wenzhou      https://sofifa.com/player/257933/wenzhuo-huang...   \n",
              "Song Yue            https://sofifa.com/player/257936/yue-song/210002   \n",
              "V. Da Silva        https://sofifa.com/player/258736/vani-da-silva...   \n",
              "B. Hough           https://sofifa.com/player/258760/ben-hough/210002   \n",
              "\n",
              "                                             long_name player_positions  \\\n",
              "short_name                                                                \n",
              "L. Messi                Lionel Andrés Messi Cuccittini       RW, ST, CF   \n",
              "Cristiano Ronaldo  Cristiano Ronaldo dos Santos Aveiro           ST, LW   \n",
              "R. Lewandowski                      Robert Lewandowski               ST   \n",
              "Neymar Jr                Neymar da Silva Santos Júnior          LW, CAM   \n",
              "K. De Bruyne                           Kevin De Bruyne          CAM, CM   \n",
              "...                                                ...              ...   \n",
              "Zhang Mengxuan                                     张梦炫               CB   \n",
              "Huang Wenzhou                                      黄文卓               CM   \n",
              "Song Yue                                            宋岳               CM   \n",
              "V. Da Silva           Ivanilson Loforte Tique Da Silva               ST   \n",
              "B. Hough                                     Ben Hough               CM   \n",
              "\n",
              "                   overall  potential    value_eur  wage_eur  age         dob  \\\n",
              "short_name                                                                      \n",
              "L. Messi                93         93  103500000.0  560000.0   33  1987-06-24   \n",
              "Cristiano Ronaldo       92         92   63000000.0  220000.0   35  1985-02-05   \n",
              "R. Lewandowski          91         91  111000000.0  240000.0   31  1988-08-21   \n",
              "Neymar Jr               91         91  132000000.0  270000.0   28  1992-02-05   \n",
              "K. De Bruyne            91         91  129000000.0  370000.0   29  1991-06-28   \n",
              "...                    ...        ...          ...       ...  ...         ...   \n",
              "Zhang Mengxuan          47         52      70000.0    1000.0   21  1999-04-26   \n",
              "Huang Wenzhou           47         53      70000.0    1000.0   21  1999-01-07   \n",
              "Song Yue                47         47      45000.0    2000.0   28  1991-11-20   \n",
              "V. Da Silva             47         67     130000.0     500.0   17  2003-03-30   \n",
              "B. Hough                47         67     130000.0     500.0   17  2003-06-22   \n",
              "\n",
              "                   ...   lcb    cb   rcb    rb    gk  \\\n",
              "short_name         ...                                 \n",
              "L. Messi           ...  52+3  52+3  52+3  62+3  19+3   \n",
              "Cristiano Ronaldo  ...  54+3  54+3  54+3  61+3  20+3   \n",
              "R. Lewandowski     ...  60+3  60+3  60+3  61+3  19+3   \n",
              "Neymar Jr          ...  49+3  49+3  49+3  62+3  20+3   \n",
              "K. De Bruyne       ...  69+3  69+3  69+3  75+3  21+3   \n",
              "...                ...   ...   ...   ...   ...   ...   \n",
              "Zhang Mengxuan     ...  47+2  47+2  47+2  45+2  15+2   \n",
              "Huang Wenzhou      ...  46+2  46+2  46+2  47+2  15+2   \n",
              "Song Yue           ...  46+1  46+1  46+1    47  11+2   \n",
              "V. Da Silva        ...  26+2  26+2  26+2  33+2  14+2   \n",
              "B. Hough           ...  41+2  41+2  41+2  43+2  14+2   \n",
              "\n",
              "                                                     player_face_url  \\\n",
              "short_name                                                             \n",
              "L. Messi           https://cdn.sofifa.net/players/158/023/21_120.png   \n",
              "Cristiano Ronaldo  https://cdn.sofifa.net/players/020/801/21_120.png   \n",
              "R. Lewandowski     https://cdn.sofifa.net/players/188/545/21_120.png   \n",
              "Neymar Jr          https://cdn.sofifa.net/players/190/871/21_120.png   \n",
              "K. De Bruyne       https://cdn.sofifa.net/players/192/985/21_120.png   \n",
              "...                                                              ...   \n",
              "Zhang Mengxuan     https://cdn.sofifa.net/players/257/710/21_120.png   \n",
              "Huang Wenzhou      https://cdn.sofifa.net/players/257/933/21_120.png   \n",
              "Song Yue           https://cdn.sofifa.net/players/257/936/21_120.png   \n",
              "V. Da Silva        https://cdn.sofifa.net/players/258/736/21_120.png   \n",
              "B. Hough           https://cdn.sofifa.net/players/258/760/21_120.png   \n",
              "\n",
              "                                                club_logo_url  \\\n",
              "short_name                                                      \n",
              "L. Messi              https://cdn.sofifa.net/teams/241/60.png   \n",
              "Cristiano Ronaldo      https://cdn.sofifa.net/teams/45/60.png   \n",
              "R. Lewandowski         https://cdn.sofifa.net/teams/21/60.png   \n",
              "Neymar Jr              https://cdn.sofifa.net/teams/73/60.png   \n",
              "K. De Bruyne           https://cdn.sofifa.net/teams/10/60.png   \n",
              "...                                                       ...   \n",
              "Zhang Mengxuan     https://cdn.sofifa.net/teams/112165/60.png   \n",
              "Huang Wenzhou      https://cdn.sofifa.net/teams/112540/60.png   \n",
              "Song Yue           https://cdn.sofifa.net/teams/111774/60.png   \n",
              "V. Da Silva          https://cdn.sofifa.net/teams/1920/60.png   \n",
              "B. Hough             https://cdn.sofifa.net/teams/1920/60.png   \n",
              "\n",
              "                                             club_flag_url  \\\n",
              "short_name                                                   \n",
              "L. Messi               https://cdn.sofifa.net/flags/es.png   \n",
              "Cristiano Ronaldo      https://cdn.sofifa.net/flags/it.png   \n",
              "R. Lewandowski         https://cdn.sofifa.net/flags/de.png   \n",
              "Neymar Jr              https://cdn.sofifa.net/flags/fr.png   \n",
              "K. De Bruyne       https://cdn.sofifa.net/flags/gb-eng.png   \n",
              "...                                                    ...   \n",
              "Zhang Mengxuan         https://cdn.sofifa.net/flags/cn.png   \n",
              "Huang Wenzhou          https://cdn.sofifa.net/flags/cn.png   \n",
              "Song Yue               https://cdn.sofifa.net/flags/cn.png   \n",
              "V. Da Silva        https://cdn.sofifa.net/flags/gb-eng.png   \n",
              "B. Hough           https://cdn.sofifa.net/flags/gb-eng.png   \n",
              "\n",
              "                                            nation_logo_url  \\\n",
              "short_name                                                    \n",
              "L. Messi           https://cdn.sofifa.net/teams/1369/60.png   \n",
              "Cristiano Ronaldo  https://cdn.sofifa.net/teams/1354/60.png   \n",
              "R. Lewandowski                                          NaN   \n",
              "Neymar Jr                                               NaN   \n",
              "K. De Bruyne       https://cdn.sofifa.net/teams/1325/60.png   \n",
              "...                                                     ...   \n",
              "Zhang Mengxuan                                          NaN   \n",
              "Huang Wenzhou                                           NaN   \n",
              "Song Yue                                                NaN   \n",
              "V. Da Silva                                             NaN   \n",
              "B. Hough                                                NaN   \n",
              "\n",
              "                                           nation_flag_url  \n",
              "short_name                                                  \n",
              "L. Messi               https://cdn.sofifa.net/flags/ar.png  \n",
              "Cristiano Ronaldo      https://cdn.sofifa.net/flags/pt.png  \n",
              "R. Lewandowski         https://cdn.sofifa.net/flags/pl.png  \n",
              "Neymar Jr              https://cdn.sofifa.net/flags/br.png  \n",
              "K. De Bruyne           https://cdn.sofifa.net/flags/be.png  \n",
              "...                                                    ...  \n",
              "Zhang Mengxuan         https://cdn.sofifa.net/flags/cn.png  \n",
              "Huang Wenzhou          https://cdn.sofifa.net/flags/cn.png  \n",
              "Song Yue               https://cdn.sofifa.net/flags/cn.png  \n",
              "V. Da Silva        https://cdn.sofifa.net/flags/gb-eng.png  \n",
              "B. Hough           https://cdn.sofifa.net/flags/gb-eng.png  \n",
              "\n",
              "[18944 rows x 109 columns]"
            ]
          },
          "execution_count": 7,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "players_21"
      ],
      "id": "74df4992"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "80316f44",
        "outputId": "b1790988-98cf-49a9-f7d7-c76575875db5"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "Index: 18944 entries, L. Messi to B. Hough\n",
            "Columns: 109 entries, sofifa_id to nation_flag_url\n",
            "dtypes: float64(16), int64(44), object(49)\n",
            "memory usage: 15.9+ MB\n"
          ]
        }
      ],
      "source": [
        "players_21.info()\n"
      ],
      "id": "80316f44"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 349
        },
        "id": "de3ffa79",
        "outputId": "30577d2e-2ea3-46b1-9526-659eedf1b84c",
        "scrolled": true
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-fa573910-9031-48e1-ae2f-49c3fd8f2f22\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>sofifa_id</th>\n",
              "      <th>overall</th>\n",
              "      <th>potential</th>\n",
              "      <th>value_eur</th>\n",
              "      <th>wage_eur</th>\n",
              "      <th>age</th>\n",
              "      <th>height_cm</th>\n",
              "      <th>weight_kg</th>\n",
              "      <th>club_team_id</th>\n",
              "      <th>league_level</th>\n",
              "      <th>...</th>\n",
              "      <th>mentality_composure</th>\n",
              "      <th>defending_marking_awareness</th>\n",
              "      <th>defending_standing_tackle</th>\n",
              "      <th>defending_sliding_tackle</th>\n",
              "      <th>goalkeeping_diving</th>\n",
              "      <th>goalkeeping_handling</th>\n",
              "      <th>goalkeeping_kicking</th>\n",
              "      <th>goalkeeping_positioning</th>\n",
              "      <th>goalkeeping_reflexes</th>\n",
              "      <th>goalkeeping_speed</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>18944.000000</td>\n",
              "      <td>18944.000000</td>\n",
              "      <td>18944.000000</td>\n",
              "      <td>1.870700e+04</td>\n",
              "      <td>18719.000000</td>\n",
              "      <td>18944.000000</td>\n",
              "      <td>18944.000000</td>\n",
              "      <td>18944.000000</td>\n",
              "      <td>18719.000000</td>\n",
              "      <td>18719.000000</td>\n",
              "      <td>...</td>\n",
              "      <td>18944.000000</td>\n",
              "      <td>18944.000000</td>\n",
              "      <td>18944.000000</td>\n",
              "      <td>18944.000000</td>\n",
              "      <td>18944.000000</td>\n",
              "      <td>18944.000000</td>\n",
              "      <td>18944.000000</td>\n",
              "      <td>18944.000000</td>\n",
              "      <td>18944.000000</td>\n",
              "      <td>2083.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>226232.328917</td>\n",
              "      <td>65.677787</td>\n",
              "      <td>71.086729</td>\n",
              "      <td>2.902288e+06</td>\n",
              "      <td>9148.482825</td>\n",
              "      <td>25.225823</td>\n",
              "      <td>181.190773</td>\n",
              "      <td>75.016892</td>\n",
              "      <td>47908.905551</td>\n",
              "      <td>1.355468</td>\n",
              "      <td>...</td>\n",
              "      <td>57.978674</td>\n",
              "      <td>46.470017</td>\n",
              "      <td>47.581767</td>\n",
              "      <td>45.546505</td>\n",
              "      <td>16.446052</td>\n",
              "      <td>16.236486</td>\n",
              "      <td>16.103357</td>\n",
              "      <td>16.225982</td>\n",
              "      <td>16.551309</td>\n",
              "      <td>37.203553</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>27166.574284</td>\n",
              "      <td>7.002278</td>\n",
              "      <td>6.109985</td>\n",
              "      <td>7.743775e+06</td>\n",
              "      <td>19893.149956</td>\n",
              "      <td>4.697354</td>\n",
              "      <td>6.825672</td>\n",
              "      <td>7.057140</td>\n",
              "      <td>53906.733776</td>\n",
              "      <td>0.739015</td>\n",
              "      <td>...</td>\n",
              "      <td>12.118390</td>\n",
              "      <td>20.169591</td>\n",
              "      <td>21.402461</td>\n",
              "      <td>20.953997</td>\n",
              "      <td>17.577332</td>\n",
              "      <td>16.845480</td>\n",
              "      <td>16.519399</td>\n",
              "      <td>17.017341</td>\n",
              "      <td>17.878121</td>\n",
              "      <td>10.714523</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>41.000000</td>\n",
              "      <td>47.000000</td>\n",
              "      <td>47.000000</td>\n",
              "      <td>9.000000e+03</td>\n",
              "      <td>500.000000</td>\n",
              "      <td>16.000000</td>\n",
              "      <td>155.000000</td>\n",
              "      <td>50.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>...</td>\n",
              "      <td>12.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>5.000000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>12.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>210028.750000</td>\n",
              "      <td>61.000000</td>\n",
              "      <td>67.000000</td>\n",
              "      <td>4.750000e+05</td>\n",
              "      <td>1000.000000</td>\n",
              "      <td>21.000000</td>\n",
              "      <td>176.000000</td>\n",
              "      <td>70.000000</td>\n",
              "      <td>461.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>...</td>\n",
              "      <td>50.000000</td>\n",
              "      <td>29.000000</td>\n",
              "      <td>27.000000</td>\n",
              "      <td>24.000000</td>\n",
              "      <td>8.000000</td>\n",
              "      <td>8.000000</td>\n",
              "      <td>8.000000</td>\n",
              "      <td>8.000000</td>\n",
              "      <td>8.000000</td>\n",
              "      <td>28.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>232301.500000</td>\n",
              "      <td>66.000000</td>\n",
              "      <td>71.000000</td>\n",
              "      <td>9.750000e+05</td>\n",
              "      <td>3000.000000</td>\n",
              "      <td>25.000000</td>\n",
              "      <td>181.000000</td>\n",
              "      <td>75.000000</td>\n",
              "      <td>1913.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>...</td>\n",
              "      <td>59.000000</td>\n",
              "      <td>52.000000</td>\n",
              "      <td>55.000000</td>\n",
              "      <td>52.000000</td>\n",
              "      <td>11.000000</td>\n",
              "      <td>11.000000</td>\n",
              "      <td>11.000000</td>\n",
              "      <td>11.000000</td>\n",
              "      <td>11.000000</td>\n",
              "      <td>37.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>246745.750000</td>\n",
              "      <td>70.000000</td>\n",
              "      <td>75.000000</td>\n",
              "      <td>2.000000e+06</td>\n",
              "      <td>8000.000000</td>\n",
              "      <td>29.000000</td>\n",
              "      <td>186.000000</td>\n",
              "      <td>80.000000</td>\n",
              "      <td>110986.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>...</td>\n",
              "      <td>66.000000</td>\n",
              "      <td>63.000000</td>\n",
              "      <td>65.000000</td>\n",
              "      <td>63.000000</td>\n",
              "      <td>14.000000</td>\n",
              "      <td>14.000000</td>\n",
              "      <td>14.000000</td>\n",
              "      <td>14.000000</td>\n",
              "      <td>14.000000</td>\n",
              "      <td>45.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>258970.000000</td>\n",
              "      <td>93.000000</td>\n",
              "      <td>95.000000</td>\n",
              "      <td>1.855000e+08</td>\n",
              "      <td>560000.000000</td>\n",
              "      <td>53.000000</td>\n",
              "      <td>206.000000</td>\n",
              "      <td>110.000000</td>\n",
              "      <td>114899.000000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>...</td>\n",
              "      <td>96.000000</td>\n",
              "      <td>94.000000</td>\n",
              "      <td>93.000000</td>\n",
              "      <td>90.000000</td>\n",
              "      <td>90.000000</td>\n",
              "      <td>92.000000</td>\n",
              "      <td>93.000000</td>\n",
              "      <td>91.000000</td>\n",
              "      <td>90.000000</td>\n",
              "      <td>65.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>8 rows × 60 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fa573910-9031-48e1-ae2f-49c3fd8f2f22')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-fa573910-9031-48e1-ae2f-49c3fd8f2f22 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-fa573910-9031-48e1-ae2f-49c3fd8f2f22');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-2d2e5794-eeff-4b21-bcfb-dcae2524f083\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2d2e5794-eeff-4b21-bcfb-dcae2524f083')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-2d2e5794-eeff-4b21-bcfb-dcae2524f083 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "           sofifa_id       overall     potential     value_eur       wage_eur  \\\n",
              "count   18944.000000  18944.000000  18944.000000  1.870700e+04   18719.000000   \n",
              "mean   226232.328917     65.677787     71.086729  2.902288e+06    9148.482825   \n",
              "std     27166.574284      7.002278      6.109985  7.743775e+06   19893.149956   \n",
              "min        41.000000     47.000000     47.000000  9.000000e+03     500.000000   \n",
              "25%    210028.750000     61.000000     67.000000  4.750000e+05    1000.000000   \n",
              "50%    232301.500000     66.000000     71.000000  9.750000e+05    3000.000000   \n",
              "75%    246745.750000     70.000000     75.000000  2.000000e+06    8000.000000   \n",
              "max    258970.000000     93.000000     95.000000  1.855000e+08  560000.000000   \n",
              "\n",
              "                age     height_cm     weight_kg   club_team_id  league_level  \\\n",
              "count  18944.000000  18944.000000  18944.000000   18719.000000  18719.000000   \n",
              "mean      25.225823    181.190773     75.016892   47908.905551      1.355468   \n",
              "std        4.697354      6.825672      7.057140   53906.733776      0.739015   \n",
              "min       16.000000    155.000000     50.000000       1.000000      1.000000   \n",
              "25%       21.000000    176.000000     70.000000     461.000000      1.000000   \n",
              "50%       25.000000    181.000000     75.000000    1913.000000      1.000000   \n",
              "75%       29.000000    186.000000     80.000000  110986.000000      1.000000   \n",
              "max       53.000000    206.000000    110.000000  114899.000000      4.000000   \n",
              "\n",
              "       ...  mentality_composure  defending_marking_awareness  \\\n",
              "count  ...         18944.000000                 18944.000000   \n",
              "mean   ...            57.978674                    46.470017   \n",
              "std    ...            12.118390                    20.169591   \n",
              "min    ...            12.000000                     3.000000   \n",
              "25%    ...            50.000000                    29.000000   \n",
              "50%    ...            59.000000                    52.000000   \n",
              "75%    ...            66.000000                    63.000000   \n",
              "max    ...            96.000000                    94.000000   \n",
              "\n",
              "       defending_standing_tackle  defending_sliding_tackle  \\\n",
              "count               18944.000000              18944.000000   \n",
              "mean                   47.581767                 45.546505   \n",
              "std                    21.402461                 20.953997   \n",
              "min                     5.000000                  4.000000   \n",
              "25%                    27.000000                 24.000000   \n",
              "50%                    55.000000                 52.000000   \n",
              "75%                    65.000000                 63.000000   \n",
              "max                    93.000000                 90.000000   \n",
              "\n",
              "       goalkeeping_diving  goalkeeping_handling  goalkeeping_kicking  \\\n",
              "count        18944.000000          18944.000000         18944.000000   \n",
              "mean            16.446052             16.236486            16.103357   \n",
              "std             17.577332             16.845480            16.519399   \n",
              "min              1.000000              1.000000             1.000000   \n",
              "25%              8.000000              8.000000             8.000000   \n",
              "50%             11.000000             11.000000            11.000000   \n",
              "75%             14.000000             14.000000            14.000000   \n",
              "max             90.000000             92.000000            93.000000   \n",
              "\n",
              "       goalkeeping_positioning  goalkeeping_reflexes  goalkeeping_speed  \n",
              "count             18944.000000          18944.000000        2083.000000  \n",
              "mean                 16.225982             16.551309          37.203553  \n",
              "std                  17.017341             17.878121          10.714523  \n",
              "min                   1.000000              1.000000          12.000000  \n",
              "25%                   8.000000              8.000000          28.000000  \n",
              "50%                  11.000000             11.000000          37.000000  \n",
              "75%                  14.000000             14.000000          45.000000  \n",
              "max                  91.000000             90.000000          65.000000  \n",
              "\n",
              "[8 rows x 60 columns]"
            ]
          },
          "execution_count": 9,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "players_21.describe()"
      ],
      "id": "de3ffa79"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "856b6e33"
      },
      "outputs": [],
      "source": [
        "pd.set_option('display.max_rows', None)\n",
        "pd.set_option('display.max_columns', None)"
      ],
      "id": "856b6e33"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bZuj5C3ABBS0"
      },
      "source": [
        "**Data Cleaning**"
      ],
      "id": "bZuj5C3ABBS0"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "f67c05a4"
      },
      "outputs": [],
      "source": [
        "useless_columns = ['sofifa_id', 'player_url', 'dob', 'long_name', 'club_team_id', 'club_loaned_from',\n",
        "                   'nationality_id', 'nation_team_id', 'player_tags', 'player_traits', 'real_face',\n",
        "                   'player_face_url', 'club_logo_url', 'club_flag_url',\n",
        "                   'nation_logo_url', 'nation_flag_url', 'club_jersey_number', 'nation_jersey_number']"
      ],
      "id": "f67c05a4"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "240852b8"
      },
      "outputs": [],
      "source": [
        "players_21 = players_21.drop(columns=useless_columns)"
      ],
      "id": "240852b8"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4193ade4",
        "outputId": "35ddd9b6-7256-45e2-8d13-03f7d46614f6",
        "scrolled": true
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "player_positions               False\n",
              "overall                        False\n",
              "potential                      False\n",
              "value_eur                       True\n",
              "wage_eur                        True\n",
              "age                            False\n",
              "height_cm                      False\n",
              "weight_kg                      False\n",
              "club_name                       True\n",
              "league_name                     True\n",
              "league_level                    True\n",
              "club_position                   True\n",
              "club_joined                     True\n",
              "club_contract_valid_until       True\n",
              "nationality_name               False\n",
              "nation_position                 True\n",
              "preferred_foot                 False\n",
              "weak_foot                      False\n",
              "skill_moves                    False\n",
              "international_reputation       False\n",
              "work_rate                      False\n",
              "body_type                      False\n",
              "release_clause_eur              True\n",
              "pace                            True\n",
              "shooting                        True\n",
              "passing                         True\n",
              "dribbling                       True\n",
              "defending                       True\n",
              "physic                          True\n",
              "attacking_crossing             False\n",
              "attacking_finishing            False\n",
              "attacking_heading_accuracy     False\n",
              "attacking_short_passing        False\n",
              "attacking_volleys              False\n",
              "skill_dribbling                False\n",
              "skill_curve                    False\n",
              "skill_fk_accuracy              False\n",
              "skill_long_passing             False\n",
              "skill_ball_control             False\n",
              "movement_acceleration          False\n",
              "movement_sprint_speed          False\n",
              "movement_agility               False\n",
              "movement_reactions             False\n",
              "movement_balance               False\n",
              "power_shot_power               False\n",
              "power_jumping                  False\n",
              "power_stamina                  False\n",
              "power_strength                 False\n",
              "power_long_shots               False\n",
              "mentality_aggression           False\n",
              "mentality_interceptions        False\n",
              "mentality_positioning          False\n",
              "mentality_vision               False\n",
              "mentality_penalties            False\n",
              "mentality_composure            False\n",
              "defending_marking_awareness    False\n",
              "defending_standing_tackle      False\n",
              "defending_sliding_tackle       False\n",
              "goalkeeping_diving             False\n",
              "goalkeeping_handling           False\n",
              "goalkeeping_kicking            False\n",
              "goalkeeping_positioning        False\n",
              "goalkeeping_reflexes           False\n",
              "goalkeeping_speed               True\n",
              "ls                             False\n",
              "st                             False\n",
              "rs                             False\n",
              "lw                             False\n",
              "lf                             False\n",
              "cf                             False\n",
              "rf                             False\n",
              "rw                             False\n",
              "lam                            False\n",
              "cam                            False\n",
              "ram                            False\n",
              "lm                             False\n",
              "lcm                            False\n",
              "cm                             False\n",
              "rcm                            False\n",
              "rm                             False\n",
              "lwb                            False\n",
              "ldm                            False\n",
              "cdm                            False\n",
              "rdm                            False\n",
              "rwb                            False\n",
              "lb                             False\n",
              "lcb                            False\n",
              "cb                             False\n",
              "rcb                            False\n",
              "rb                             False\n",
              "gk                             False\n",
              "dtype: bool"
            ]
          },
          "execution_count": 13,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "players_21.isna().any()"
      ],
      "id": "4193ade4"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "abbbc682"
      },
      "outputs": [],
      "source": [
        "num_imputer = SimpleImputer(missing_values=np.nan, strategy='mean')"
      ],
      "id": "abbbc682"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "71717673"
      },
      "outputs": [],
      "source": [
        "num_cols = ['value_eur', 'wage_eur', 'pace', 'shooting', 'passing', 'dribbling', 'defending', 'physic', 'goalkeeping_speed']"
      ],
      "id": "71717673"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "b1885506"
      },
      "outputs": [],
      "source": [
        "players_21[num_cols] = num_imputer.fit_transform(players_21[num_cols])"
      ],
      "id": "b1885506"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "0a352f2c"
      },
      "outputs": [],
      "source": [
        "cat_imputer = SimpleImputer(strategy=\"most_frequent\")"
      ],
      "id": "0a352f2c"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "b65a2944"
      },
      "outputs": [],
      "source": [
        "cat_cols = ['club_name', 'league_name', 'league_level', 'club_position', 'club_joined',\n",
        "            'club_contract_valid_until', 'nation_position']\n"
      ],
      "id": "b65a2944"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "f3bc9a27"
      },
      "outputs": [],
      "source": [
        "players_21[cat_cols] = cat_imputer.fit_transform(players_21[cat_cols])"
      ],
      "id": "f3bc9a27"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "e8b5b34d"
      },
      "outputs": [],
      "source": [
        "players_21['release_clause_eur'].fillna(0, inplace=True)"
      ],
      "id": "e8b5b34d"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "07cf98a5",
        "outputId": "5c995ee4-a48c-401c-f7c2-db9d9969346d",
        "scrolled": false
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "player_positions               False\n",
              "overall                        False\n",
              "potential                      False\n",
              "value_eur                      False\n",
              "wage_eur                       False\n",
              "age                            False\n",
              "height_cm                      False\n",
              "weight_kg                      False\n",
              "club_name                      False\n",
              "league_name                    False\n",
              "league_level                   False\n",
              "club_position                  False\n",
              "club_joined                    False\n",
              "club_contract_valid_until      False\n",
              "nationality_name               False\n",
              "nation_position                False\n",
              "preferred_foot                 False\n",
              "weak_foot                      False\n",
              "skill_moves                    False\n",
              "international_reputation       False\n",
              "work_rate                      False\n",
              "body_type                      False\n",
              "release_clause_eur             False\n",
              "pace                           False\n",
              "shooting                       False\n",
              "passing                        False\n",
              "dribbling                      False\n",
              "defending                      False\n",
              "physic                         False\n",
              "attacking_crossing             False\n",
              "attacking_finishing            False\n",
              "attacking_heading_accuracy     False\n",
              "attacking_short_passing        False\n",
              "attacking_volleys              False\n",
              "skill_dribbling                False\n",
              "skill_curve                    False\n",
              "skill_fk_accuracy              False\n",
              "skill_long_passing             False\n",
              "skill_ball_control             False\n",
              "movement_acceleration          False\n",
              "movement_sprint_speed          False\n",
              "movement_agility               False\n",
              "movement_reactions             False\n",
              "movement_balance               False\n",
              "power_shot_power               False\n",
              "power_jumping                  False\n",
              "power_stamina                  False\n",
              "power_strength                 False\n",
              "power_long_shots               False\n",
              "mentality_aggression           False\n",
              "mentality_interceptions        False\n",
              "mentality_positioning          False\n",
              "mentality_vision               False\n",
              "mentality_penalties            False\n",
              "mentality_composure            False\n",
              "defending_marking_awareness    False\n",
              "defending_standing_tackle      False\n",
              "defending_sliding_tackle       False\n",
              "goalkeeping_diving             False\n",
              "goalkeeping_handling           False\n",
              "goalkeeping_kicking            False\n",
              "goalkeeping_positioning        False\n",
              "goalkeeping_reflexes           False\n",
              "goalkeeping_speed              False\n",
              "ls                             False\n",
              "st                             False\n",
              "rs                             False\n",
              "lw                             False\n",
              "lf                             False\n",
              "cf                             False\n",
              "rf                             False\n",
              "rw                             False\n",
              "lam                            False\n",
              "cam                            False\n",
              "ram                            False\n",
              "lm                             False\n",
              "lcm                            False\n",
              "cm                             False\n",
              "rcm                            False\n",
              "rm                             False\n",
              "lwb                            False\n",
              "ldm                            False\n",
              "cdm                            False\n",
              "rdm                            False\n",
              "rwb                            False\n",
              "lb                             False\n",
              "lcb                            False\n",
              "cb                             False\n",
              "rcb                            False\n",
              "rb                             False\n",
              "gk                             False\n",
              "dtype: bool"
            ]
          },
          "execution_count": 21,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "players_21.isna().any()"
      ],
      "id": "07cf98a5"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "4c500231"
      },
      "outputs": [],
      "source": [
        "pd.set_option('display.max_rows', 10)\n",
        "pd.set_option('display.max_columns', 10)"
      ],
      "id": "4c500231"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "9730c609"
      },
      "outputs": [],
      "source": [
        "categorical = ['player_positions', 'club_name', 'league_name', 'club_position', 'club_joined', 'nationality_name', 'nation_position', 'preferred_foot', 'work_rate', 'body_type']\n"
      ],
      "id": "9730c609"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "a7216e85"
      },
      "outputs": [],
      "source": [
        "scaler = StandardScaler()"
      ],
      "id": "a7216e85"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "3bab0bf2"
      },
      "outputs": [],
      "source": [
        "#Columns probably containing + or -\n",
        "\n",
        "\n",
        "columns1 = ['ls','st','rs','lw','lf','cf','rf','rw','lam','cam','ram',\n",
        "            'lm','lcm','cm','rcm','rm','lwb','ldm', 'cdm','rdm','rwb',\n",
        "            'lb','lcb','cb','rcb','rb', 'gk']"
      ],
      "id": "3bab0bf2"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "b3525cfa"
      },
      "outputs": [],
      "source": [
        "#Dropping values after + or -\n",
        "for col in columns1:\n",
        "    players_21[col] = players_21[col].str.split('+', n = 1, expand = True)[0]\n",
        "    players_21[col] = players_21[col].str.split('-', n = 1, expand = True)[0]"
      ],
      "id": "b3525cfa"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ELJyPsaKBHKh"
      },
      "source": [
        "**Exploratory Data Analysis**"
      ],
      "id": "ELJyPsaKBHKh"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 349
        },
        "id": "bNwW8YNZ0j0R",
        "outputId": "858c88b6-b574-40f6-9343-68ba9ac0161a"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-8389d096-05c7-49cc-9897-3c7b150ff33d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>overall</th>\n",
              "      <th>potential</th>\n",
              "      <th>value_eur</th>\n",
              "      <th>wage_eur</th>\n",
              "      <th>age</th>\n",
              "      <th>...</th>\n",
              "      <th>goalkeeping_handling</th>\n",
              "      <th>goalkeeping_kicking</th>\n",
              "      <th>goalkeeping_positioning</th>\n",
              "      <th>goalkeeping_reflexes</th>\n",
              "      <th>goalkeeping_speed</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>18944.000000</td>\n",
              "      <td>18944.000000</td>\n",
              "      <td>1.894400e+04</td>\n",
              "      <td>18944.000000</td>\n",
              "      <td>18944.000000</td>\n",
              "      <td>...</td>\n",
              "      <td>18944.000000</td>\n",
              "      <td>18944.000000</td>\n",
              "      <td>18944.000000</td>\n",
              "      <td>18944.000000</td>\n",
              "      <td>18944.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>65.677787</td>\n",
              "      <td>71.086729</td>\n",
              "      <td>2.902288e+06</td>\n",
              "      <td>9148.482825</td>\n",
              "      <td>25.225823</td>\n",
              "      <td>...</td>\n",
              "      <td>16.236486</td>\n",
              "      <td>16.103357</td>\n",
              "      <td>16.225982</td>\n",
              "      <td>16.551309</td>\n",
              "      <td>37.203553</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>7.002278</td>\n",
              "      <td>6.109985</td>\n",
              "      <td>7.695181e+06</td>\n",
              "      <td>19774.654223</td>\n",
              "      <td>4.697354</td>\n",
              "      <td>...</td>\n",
              "      <td>16.845480</td>\n",
              "      <td>16.519399</td>\n",
              "      <td>17.017341</td>\n",
              "      <td>17.878121</td>\n",
              "      <td>3.552130</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>47.000000</td>\n",
              "      <td>47.000000</td>\n",
              "      <td>9.000000e+03</td>\n",
              "      <td>500.000000</td>\n",
              "      <td>16.000000</td>\n",
              "      <td>...</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>12.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>61.000000</td>\n",
              "      <td>67.000000</td>\n",
              "      <td>4.750000e+05</td>\n",
              "      <td>1000.000000</td>\n",
              "      <td>21.000000</td>\n",
              "      <td>...</td>\n",
              "      <td>8.000000</td>\n",
              "      <td>8.000000</td>\n",
              "      <td>8.000000</td>\n",
              "      <td>8.000000</td>\n",
              "      <td>37.203553</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>66.000000</td>\n",
              "      <td>71.000000</td>\n",
              "      <td>9.750000e+05</td>\n",
              "      <td>3000.000000</td>\n",
              "      <td>25.000000</td>\n",
              "      <td>...</td>\n",
              "      <td>11.000000</td>\n",
              "      <td>11.000000</td>\n",
              "      <td>11.000000</td>\n",
              "      <td>11.000000</td>\n",
              "      <td>37.203553</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>70.000000</td>\n",
              "      <td>75.000000</td>\n",
              "      <td>2.100000e+06</td>\n",
              "      <td>9000.000000</td>\n",
              "      <td>29.000000</td>\n",
              "      <td>...</td>\n",
              "      <td>14.000000</td>\n",
              "      <td>14.000000</td>\n",
              "      <td>14.000000</td>\n",
              "      <td>14.000000</td>\n",
              "      <td>37.203553</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>93.000000</td>\n",
              "      <td>95.000000</td>\n",
              "      <td>1.855000e+08</td>\n",
              "      <td>560000.000000</td>\n",
              "      <td>53.000000</td>\n",
              "      <td>...</td>\n",
              "      <td>92.000000</td>\n",
              "      <td>93.000000</td>\n",
              "      <td>91.000000</td>\n",
              "      <td>90.000000</td>\n",
              "      <td>65.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>8 rows × 52 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8389d096-05c7-49cc-9897-3c7b150ff33d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-8389d096-05c7-49cc-9897-3c7b150ff33d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-8389d096-05c7-49cc-9897-3c7b150ff33d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-a3a50b7f-7f11-45d1-a20c-5fb1de6fc010\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a3a50b7f-7f11-45d1-a20c-5fb1de6fc010')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-a3a50b7f-7f11-45d1-a20c-5fb1de6fc010 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "            overall     potential     value_eur       wage_eur           age  \\\n",
              "count  18944.000000  18944.000000  1.894400e+04   18944.000000  18944.000000   \n",
              "mean      65.677787     71.086729  2.902288e+06    9148.482825     25.225823   \n",
              "std        7.002278      6.109985  7.695181e+06   19774.654223      4.697354   \n",
              "min       47.000000     47.000000  9.000000e+03     500.000000     16.000000   \n",
              "25%       61.000000     67.000000  4.750000e+05    1000.000000     21.000000   \n",
              "50%       66.000000     71.000000  9.750000e+05    3000.000000     25.000000   \n",
              "75%       70.000000     75.000000  2.100000e+06    9000.000000     29.000000   \n",
              "max       93.000000     95.000000  1.855000e+08  560000.000000     53.000000   \n",
              "\n",
              "       ...  goalkeeping_handling  goalkeeping_kicking  \\\n",
              "count  ...          18944.000000         18944.000000   \n",
              "mean   ...             16.236486            16.103357   \n",
              "std    ...             16.845480            16.519399   \n",
              "min    ...              1.000000             1.000000   \n",
              "25%    ...              8.000000             8.000000   \n",
              "50%    ...             11.000000            11.000000   \n",
              "75%    ...             14.000000            14.000000   \n",
              "max    ...             92.000000            93.000000   \n",
              "\n",
              "       goalkeeping_positioning  goalkeeping_reflexes  goalkeeping_speed  \n",
              "count             18944.000000          18944.000000       18944.000000  \n",
              "mean                 16.225982             16.551309          37.203553  \n",
              "std                  17.017341             17.878121           3.552130  \n",
              "min                   1.000000              1.000000          12.000000  \n",
              "25%                   8.000000              8.000000          37.203553  \n",
              "50%                  11.000000             11.000000          37.203553  \n",
              "75%                  14.000000             14.000000          37.203553  \n",
              "max                  91.000000             90.000000          65.000000  \n",
              "\n",
              "[8 rows x 52 columns]"
            ]
          },
          "execution_count": 27,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "players_21.describe()"
      ],
      "id": "bNwW8YNZ0j0R"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JB-fA02lCVyn"
      },
      "source": [
        "Correlation Matrix"
      ],
      "id": "JB-fA02lCVyn"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 682
        },
        "id": "IpNGoYSuznNC",
        "outputId": "4b1cc020-31ba-4b53-a325-d3e72362cb98"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "<ipython-input-28-1ac9429fd28b>:1: FutureWarning: The default value of numeric_only in DataFrame.corr is deprecated. In a future version, it will default to False. Select only valid columns or specify the value of numeric_only to silence this warning.\n",
            "  corr_matrix_21 = players_21.corr()\n"
          ]
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "corr_matrix_21 = players_21.corr()\n",
        "sns.heatmap(corr_matrix_21)\n",
        "plt.title('Correlation Matrix')\n",
        "plt.show()\n"
      ],
      "id": "IpNGoYSuznNC"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LrHXu83HCbEY"
      },
      "source": [
        "Overall rating distribution"
      ],
      "id": "LrHXu83HCbEY"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 452
        },
        "id": "CDrrHXa61qjC",
        "outputId": "c0ff868b-ffd5-40f9-8cdf-762b8991c7d9"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "\n",
        "plt.hist(players_21['overall'], bins=30)\n",
        "plt.title('Distribution of Overall Rating')\n",
        "plt.show()\n"
      ],
      "id": "CDrrHXa61qjC"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9at_1kFYE2-A"
      },
      "source": [
        "\n",
        "players_21.sort_values(by='overall',ascending=False)[[\"short_name\",\"overall\",\"age\"]].head(20)"
      ],
      "id": "9at_1kFYE2-A"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "WnUq-YWpCh-R"
      },
      "source": [
        "Nationalities of Players"
      ],
      "id": "WnUq-YWpCh-R"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "X-rA2K2fBNYo",
        "outputId": "6511a6a4-b40a-493d-9c68-f5eaa96e8c30"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "England          1685\n",
              "Germany          1189\n",
              "Spain            1072\n",
              "France            984\n",
              "Argentina         936\n",
              "Brazil            887\n",
              "Japan             489\n",
              "Netherlands       432\n",
              "Italy             421\n",
              "United States     378\n",
              "Name: nationality_name, dtype: int64"
            ]
          },
          "execution_count": 30,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "country_players = players_21['nationality_name'].value_counts().head(10)\n",
        "country_players"
      ],
      "id": "X-rA2K2fBNYo"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 545
        },
        "id": "DlTJyxgLB1Po",
        "outputId": "e4e4f0be-0e41-470c-8caf-6ee89b2f71b6"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "plt.figure(figsize=(8, 6))\n",
        "sns.barplot(x=country_players.index, y=country_players.values,palette=\"plasma\",capsize=.2)\n",
        "\n",
        "plt.title('Players per country')\n",
        "plt.show()\n",
        "\n",
        "#https://www.kaggle.com/code/alefernandezarmas/fifa-22-player-overall-predictions?scriptVersionId=129277545&cellId=25"
      ],
      "id": "DlTJyxgLB1Po"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XnEkRzVACk7w"
      },
      "source": [
        "**Feature Engineering**"
      ],
      "id": "XnEkRzVACk7w"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "CR98rMsVzhFo"
      },
      "outputs": [],
      "source": [
        "players_21 = pd.get_dummies(players_21, columns=categorical)"
      ],
      "id": "CR98rMsVzhFo"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 455
        },
        "id": "05a87467",
        "outputId": "1dec1c4e-f640-4617-c092-9a3463c18b55",
        "scrolled": false
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-aee9b876-3ca1-40de-80bc-2f354cf78d78\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ls</th>\n",
              "      <th>st</th>\n",
              "      <th>rs</th>\n",
              "      <th>lw</th>\n",
              "      <th>lf</th>\n",
              "      <th>...</th>\n",
              "      <th>lcb</th>\n",
              "      <th>cb</th>\n",
              "      <th>rcb</th>\n",
              "      <th>rb</th>\n",
              "      <th>gk</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>short_name</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>L. Messi</th>\n",
              "      <td>89</td>\n",
              "      <td>89</td>\n",
              "      <td>89</td>\n",
              "      <td>92</td>\n",
              "      <td>93</td>\n",
              "      <td>...</td>\n",
              "      <td>52</td>\n",
              "      <td>52</td>\n",
              "      <td>52</td>\n",
              "      <td>62</td>\n",
              "      <td>19</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Cristiano Ronaldo</th>\n",
              "      <td>91</td>\n",
              "      <td>91</td>\n",
              "      <td>91</td>\n",
              "      <td>89</td>\n",
              "      <td>91</td>\n",
              "      <td>...</td>\n",
              "      <td>54</td>\n",
              "      <td>54</td>\n",
              "      <td>54</td>\n",
              "      <td>61</td>\n",
              "      <td>20</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>R. Lewandowski</th>\n",
              "      <td>89</td>\n",
              "      <td>89</td>\n",
              "      <td>89</td>\n",
              "      <td>85</td>\n",
              "      <td>87</td>\n",
              "      <td>...</td>\n",
              "      <td>60</td>\n",
              "      <td>60</td>\n",
              "      <td>60</td>\n",
              "      <td>61</td>\n",
              "      <td>19</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Neymar Jr</th>\n",
              "      <td>84</td>\n",
              "      <td>84</td>\n",
              "      <td>84</td>\n",
              "      <td>90</td>\n",
              "      <td>89</td>\n",
              "      <td>...</td>\n",
              "      <td>49</td>\n",
              "      <td>49</td>\n",
              "      <td>49</td>\n",
              "      <td>62</td>\n",
              "      <td>20</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>K. De Bruyne</th>\n",
              "      <td>83</td>\n",
              "      <td>83</td>\n",
              "      <td>83</td>\n",
              "      <td>88</td>\n",
              "      <td>88</td>\n",
              "      <td>...</td>\n",
              "      <td>69</td>\n",
              "      <td>69</td>\n",
              "      <td>69</td>\n",
              "      <td>75</td>\n",
              "      <td>21</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Zhang Mengxuan</th>\n",
              "      <td>32</td>\n",
              "      <td>32</td>\n",
              "      <td>32</td>\n",
              "      <td>30</td>\n",
              "      <td>30</td>\n",
              "      <td>...</td>\n",
              "      <td>47</td>\n",
              "      <td>47</td>\n",
              "      <td>47</td>\n",
              "      <td>45</td>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Huang Wenzhou</th>\n",
              "      <td>41</td>\n",
              "      <td>41</td>\n",
              "      <td>41</td>\n",
              "      <td>45</td>\n",
              "      <td>44</td>\n",
              "      <td>...</td>\n",
              "      <td>46</td>\n",
              "      <td>46</td>\n",
              "      <td>46</td>\n",
              "      <td>47</td>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Song Yue</th>\n",
              "      <td>46</td>\n",
              "      <td>46</td>\n",
              "      <td>46</td>\n",
              "      <td>47</td>\n",
              "      <td>46</td>\n",
              "      <td>...</td>\n",
              "      <td>46</td>\n",
              "      <td>46</td>\n",
              "      <td>46</td>\n",
              "      <td>47</td>\n",
              "      <td>11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>V. Da Silva</th>\n",
              "      <td>47</td>\n",
              "      <td>47</td>\n",
              "      <td>47</td>\n",
              "      <td>49</td>\n",
              "      <td>49</td>\n",
              "      <td>...</td>\n",
              "      <td>26</td>\n",
              "      <td>26</td>\n",
              "      <td>26</td>\n",
              "      <td>33</td>\n",
              "      <td>14</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>B. Hough</th>\n",
              "      <td>47</td>\n",
              "      <td>47</td>\n",
              "      <td>47</td>\n",
              "      <td>49</td>\n",
              "      <td>49</td>\n",
              "      <td>...</td>\n",
              "      <td>41</td>\n",
              "      <td>41</td>\n",
              "      <td>41</td>\n",
              "      <td>43</td>\n",
              "      <td>14</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>18944 rows × 27 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-aee9b876-3ca1-40de-80bc-2f354cf78d78')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-aee9b876-3ca1-40de-80bc-2f354cf78d78 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-aee9b876-3ca1-40de-80bc-2f354cf78d78');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-f3ffefe7-487a-4ca2-8a10-f43af7cafb68\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f3ffefe7-487a-4ca2-8a10-f43af7cafb68')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-f3ffefe7-487a-4ca2-8a10-f43af7cafb68 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "                   ls  st  rs  lw  lf  ... lcb  cb rcb  rb  gk\n",
              "short_name                             ...                    \n",
              "L. Messi           89  89  89  92  93  ...  52  52  52  62  19\n",
              "Cristiano Ronaldo  91  91  91  89  91  ...  54  54  54  61  20\n",
              "R. Lewandowski     89  89  89  85  87  ...  60  60  60  61  19\n",
              "Neymar Jr          84  84  84  90  89  ...  49  49  49  62  20\n",
              "K. De Bruyne       83  83  83  88  88  ...  69  69  69  75  21\n",
              "...                ..  ..  ..  ..  ..  ...  ..  ..  ..  ..  ..\n",
              "Zhang Mengxuan     32  32  32  30  30  ...  47  47  47  45  15\n",
              "Huang Wenzhou      41  41  41  45  44  ...  46  46  46  47  15\n",
              "Song Yue           46  46  46  47  46  ...  46  46  46  47  11\n",
              "V. Da Silva        47  47  47  49  49  ...  26  26  26  33  14\n",
              "B. Hough           47  47  47  49  49  ...  41  41  41  43  14\n",
              "\n",
              "[18944 rows x 27 columns]"
            ]
          },
          "execution_count": 33,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "players_21[columns1]\n"
      ],
      "id": "05a87467"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "9c802286"
      },
      "outputs": [],
      "source": [
        "pd.set_option('display.max_rows', None)\n",
        "pd.set_option('display.max_columns', None)"
      ],
      "id": "9c802286"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "004418a3",
        "outputId": "00631011-abef-4190-d569-7fa5f11867ca",
        "scrolled": false
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "Index: 18944 entries, L. Messi to B. Hough\n",
            "Data columns (total 27 columns):\n",
            " #   Column  Non-Null Count  Dtype \n",
            "---  ------  --------------  ----- \n",
            " 0   ls      18944 non-null  object\n",
            " 1   st      18944 non-null  object\n",
            " 2   rs      18944 non-null  object\n",
            " 3   lw      18944 non-null  object\n",
            " 4   lf      18944 non-null  object\n",
            " 5   cf      18944 non-null  object\n",
            " 6   rf      18944 non-null  object\n",
            " 7   rw      18944 non-null  object\n",
            " 8   lam     18944 non-null  object\n",
            " 9   cam     18944 non-null  object\n",
            " 10  ram     18944 non-null  object\n",
            " 11  lm      18944 non-null  object\n",
            " 12  lcm     18944 non-null  object\n",
            " 13  cm      18944 non-null  object\n",
            " 14  rcm     18944 non-null  object\n",
            " 15  rm      18944 non-null  object\n",
            " 16  lwb     18944 non-null  object\n",
            " 17  ldm     18944 non-null  object\n",
            " 18  cdm     18944 non-null  object\n",
            " 19  rdm     18944 non-null  object\n",
            " 20  rwb     18944 non-null  object\n",
            " 21  lb      18944 non-null  object\n",
            " 22  lcb     18944 non-null  object\n",
            " 23  cb      18944 non-null  object\n",
            " 24  rcb     18944 non-null  object\n",
            " 25  rb      18944 non-null  object\n",
            " 26  gk      18944 non-null  object\n",
            "dtypes: object(27)\n",
            "memory usage: 4.0+ MB\n"
          ]
        }
      ],
      "source": [
        "players_21[columns1].info()"
      ],
      "id": "004418a3"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "93cd1fcd"
      },
      "outputs": [],
      "source": [
        "pd.set_option('display.max_rows', 20)\n",
        "pd.set_option('display.max_columns', None)"
      ],
      "id": "93cd1fcd"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "775ffe65"
      },
      "outputs": [],
      "source": [
        "players_21"
      ],
      "id": "775ffe65"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "giWdoDqXzttN"
      },
      "outputs": [],
      "source": [
        "y = players_21['overall']"
      ],
      "id": "giWdoDqXzttN"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Q7hGEqxgz0g1",
        "outputId": "9308b77f-a44f-4a00-daac-e846f40e368d"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "short_name\n",
              "L. Messi             93\n",
              "Cristiano Ronaldo    92\n",
              "R. Lewandowski       91\n",
              "Neymar Jr            91\n",
              "K. De Bruyne         91\n",
              "                     ..\n",
              "Zhang Mengxuan       47\n",
              "Huang Wenzhou        47\n",
              "Song Yue             47\n",
              "V. Da Silva          47\n",
              "B. Hough             47\n",
              "Name: overall, Length: 18944, dtype: int64"
            ]
          },
          "execution_count": 39,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "y"
      ],
      "id": "Q7hGEqxgz0g1"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "0uXKCtc6z1kA"
      },
      "outputs": [],
      "source": [
        "X = players_21.drop('overall', axis=1)"
      ],
      "id": "0uXKCtc6z1kA"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "80a63440",
        "scrolled": true
      },
      "outputs": [],
      "source": [
        "players_21_scaled = pd.DataFrame(scaler.fit_transform(X), columns=X.columns)"
      ],
      "id": "80a63440"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "32849fb3"
      },
      "outputs": [],
      "source": [
        "pd.set_option('display.max_rows', 20)\n",
        "pd.set_option('display.max_columns', None)"
      ],
      "id": "32849fb3"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "4c48a84c"
      },
      "outputs": [],
      "source": [
        "players_21_scaled"
      ],
      "id": "4c48a84c"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nfzTggVNCslS"
      },
      "source": [
        "**Model Preparation**"
      ],
      "id": "nfzTggVNCslS"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "f618b043"
      },
      "outputs": [],
      "source": [
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)"
      ],
      "id": "f618b043"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "7f5bc0c3"
      },
      "outputs": [],
      "source": [
        "pd.set_option('display.max_rows', 10)\n",
        "pd.set_option('display.max_columns', 10)"
      ],
      "id": "7f5bc0c3"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KdOmLh8yDsOO"
      },
      "source": [
        "## **players_22 dataset**"
      ],
      "id": "KdOmLh8yDsOO"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "s3omygiVDyj-"
      },
      "source": [
        "**Data Loading and Exploration**"
      ],
      "id": "s3omygiVDyj-"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "c6390a51",
        "outputId": "4ab3c273-929a-4314-b5cf-22b484a80c98"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "<ipython-input-46-d2a396bd6e92>:1: DtypeWarning: Columns (25,108) have mixed types. Specify dtype option on import or set low_memory=False.\n",
            "  players_22 = pd.read_csv('/content/drive/My Drive/Mid Sem Project/players_22.csv')\n"
          ]
        }
      ],
      "source": [
        "players_22 = pd.read_csv('/content/drive/My Drive/Mid Sem Project/players_22.csv')"
      ],
      "id": "c6390a51"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "9c268faf"
      },
      "outputs": [],
      "source": [
        "players_22 = pd.DataFrame(players_22)"
      ],
      "id": "9c268faf"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "d832cf9a",
        "outputId": "d14830cc-cc80-47e0-b907-05a6cf8afea9"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-e11e757a-9610-4cd7-a802-eded5e663873\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>sofifa_id</th>\n",
              "      <th>player_url</th>\n",
              "      <th>short_name</th>\n",
              "      <th>long_name</th>\n",
              "      <th>player_positions</th>\n",
              "      <th>...</th>\n",
              "      <th>player_face_url</th>\n",
              "      <th>club_logo_url</th>\n",
              "      <th>club_flag_url</th>\n",
              "      <th>nation_logo_url</th>\n",
              "      <th>nation_flag_url</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>158023</td>\n",
              "      <td>https://sofifa.com/player/158023/lionel-messi/...</td>\n",
              "      <td>L. Messi</td>\n",
              "      <td>Lionel Andrés Messi Cuccittini</td>\n",
              "      <td>RW, ST, CF</td>\n",
              "      <td>...</td>\n",
              "      <td>https://cdn.sofifa.net/players/158/023/22_120.png</td>\n",
              "      <td>https://cdn.sofifa.net/teams/73/60.png</td>\n",
              "      <td>https://cdn.sofifa.net/flags/fr.png</td>\n",
              "      <td>https://cdn.sofifa.net/teams/1369/60.png</td>\n",
              "      <td>https://cdn.sofifa.net/flags/ar.png</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>188545</td>\n",
              "      <td>https://sofifa.com/player/188545/robert-lewand...</td>\n",
              "      <td>R. Lewandowski</td>\n",
              "      <td>Robert Lewandowski</td>\n",
              "      <td>ST</td>\n",
              "      <td>...</td>\n",
              "      <td>https://cdn.sofifa.net/players/188/545/22_120.png</td>\n",
              "      <td>https://cdn.sofifa.net/teams/21/60.png</td>\n",
              "      <td>https://cdn.sofifa.net/flags/de.png</td>\n",
              "      <td>https://cdn.sofifa.net/teams/1353/60.png</td>\n",
              "      <td>https://cdn.sofifa.net/flags/pl.png</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>20801</td>\n",
              "      <td>https://sofifa.com/player/20801/c-ronaldo-dos-...</td>\n",
              "      <td>Cristiano Ronaldo</td>\n",
              "      <td>Cristiano Ronaldo dos Santos Aveiro</td>\n",
              "      <td>ST, LW</td>\n",
              "      <td>...</td>\n",
              "      <td>https://cdn.sofifa.net/players/020/801/22_120.png</td>\n",
              "      <td>https://cdn.sofifa.net/teams/11/60.png</td>\n",
              "      <td>https://cdn.sofifa.net/flags/gb-eng.png</td>\n",
              "      <td>https://cdn.sofifa.net/teams/1354/60.png</td>\n",
              "      <td>https://cdn.sofifa.net/flags/pt.png</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>190871</td>\n",
              "      <td>https://sofifa.com/player/190871/neymar-da-sil...</td>\n",
              "      <td>Neymar Jr</td>\n",
              "      <td>Neymar da Silva Santos Júnior</td>\n",
              "      <td>LW, CAM</td>\n",
              "      <td>...</td>\n",
              "      <td>https://cdn.sofifa.net/players/190/871/22_120.png</td>\n",
              "      <td>https://cdn.sofifa.net/teams/73/60.png</td>\n",
              "      <td>https://cdn.sofifa.net/flags/fr.png</td>\n",
              "      <td>NaN</td>\n",
              "      <td>https://cdn.sofifa.net/flags/br.png</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>192985</td>\n",
              "      <td>https://sofifa.com/player/192985/kevin-de-bruy...</td>\n",
              "      <td>K. De Bruyne</td>\n",
              "      <td>Kevin De Bruyne</td>\n",
              "      <td>CM, CAM</td>\n",
              "      <td>...</td>\n",
              "      <td>https://cdn.sofifa.net/players/192/985/22_120.png</td>\n",
              "      <td>https://cdn.sofifa.net/teams/10/60.png</td>\n",
              "      <td>https://cdn.sofifa.net/flags/gb-eng.png</td>\n",
              "      <td>https://cdn.sofifa.net/teams/1325/60.png</td>\n",
              "      <td>https://cdn.sofifa.net/flags/be.png</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19234</th>\n",
              "      <td>261962</td>\n",
              "      <td>https://sofifa.com/player/261962/defu-song/220002</td>\n",
              "      <td>Song Defu</td>\n",
              "      <td>宋德福</td>\n",
              "      <td>CDM</td>\n",
              "      <td>...</td>\n",
              "      <td>https://cdn.sofifa.net/players/261/962/22_120.png</td>\n",
              "      <td>https://cdn.sofifa.net/teams/112541/60.png</td>\n",
              "      <td>https://cdn.sofifa.net/flags/cn.png</td>\n",
              "      <td>NaN</td>\n",
              "      <td>https://cdn.sofifa.net/flags/cn.png</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19235</th>\n",
              "      <td>262040</td>\n",
              "      <td>https://sofifa.com/player/262040/caoimhin-port...</td>\n",
              "      <td>C. Porter</td>\n",
              "      <td>Caoimhin Porter</td>\n",
              "      <td>CM</td>\n",
              "      <td>...</td>\n",
              "      <td>https://cdn.sofifa.net/players/262/040/22_120.png</td>\n",
              "      <td>https://cdn.sofifa.net/teams/445/60.png</td>\n",
              "      <td>https://cdn.sofifa.net/flags/ie.png</td>\n",
              "      <td>NaN</td>\n",
              "      <td>https://cdn.sofifa.net/flags/ie.png</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19236</th>\n",
              "      <td>262760</td>\n",
              "      <td>https://sofifa.com/player/262760/nathan-logue/...</td>\n",
              "      <td>N. Logue</td>\n",
              "      <td>Nathan Logue-Cunningham</td>\n",
              "      <td>CM</td>\n",
              "      <td>...</td>\n",
              "      <td>https://cdn.sofifa.net/players/262/760/22_120.png</td>\n",
              "      <td>https://cdn.sofifa.net/teams/111131/60.png</td>\n",
              "      <td>https://cdn.sofifa.net/flags/ie.png</td>\n",
              "      <td>NaN</td>\n",
              "      <td>https://cdn.sofifa.net/flags/ie.png</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19237</th>\n",
              "      <td>262820</td>\n",
              "      <td>https://sofifa.com/player/262820/luke-rudden/2...</td>\n",
              "      <td>L. Rudden</td>\n",
              "      <td>Luke Rudden</td>\n",
              "      <td>ST</td>\n",
              "      <td>...</td>\n",
              "      <td>https://cdn.sofifa.net/players/262/820/22_120.png</td>\n",
              "      <td>https://cdn.sofifa.net/teams/111131/60.png</td>\n",
              "      <td>https://cdn.sofifa.net/flags/ie.png</td>\n",
              "      <td>NaN</td>\n",
              "      <td>https://cdn.sofifa.net/flags/ie.png</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19238</th>\n",
              "      <td>264540</td>\n",
              "      <td>https://sofifa.com/player/264540/emanuel-lalch...</td>\n",
              "      <td>E. Lalchhanchhuaha</td>\n",
              "      <td>Emanuel Lalchhanchhuaha</td>\n",
              "      <td>CAM</td>\n",
              "      <td>...</td>\n",
              "      <td>https://cdn.sofifa.net/players/264/540/22_120.png</td>\n",
              "      <td>https://cdn.sofifa.net/teams/113040/60.png</td>\n",
              "      <td>https://cdn.sofifa.net/flags/in.png</td>\n",
              "      <td>NaN</td>\n",
              "      <td>https://cdn.sofifa.net/flags/in.png</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>19239 rows × 110 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e11e757a-9610-4cd7-a802-eded5e663873')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e11e757a-9610-4cd7-a802-eded5e663873 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e11e757a-9610-4cd7-a802-eded5e663873');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-d2e2a2d9-d8d7-4ad8-b52e-2bfa53210eb3\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d2e2a2d9-d8d7-4ad8-b52e-2bfa53210eb3')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-d2e2a2d9-d8d7-4ad8-b52e-2bfa53210eb3 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "       sofifa_id                                         player_url  \\\n",
              "0         158023  https://sofifa.com/player/158023/lionel-messi/...   \n",
              "1         188545  https://sofifa.com/player/188545/robert-lewand...   \n",
              "2          20801  https://sofifa.com/player/20801/c-ronaldo-dos-...   \n",
              "3         190871  https://sofifa.com/player/190871/neymar-da-sil...   \n",
              "4         192985  https://sofifa.com/player/192985/kevin-de-bruy...   \n",
              "...          ...                                                ...   \n",
              "19234     261962  https://sofifa.com/player/261962/defu-song/220002   \n",
              "19235     262040  https://sofifa.com/player/262040/caoimhin-port...   \n",
              "19236     262760  https://sofifa.com/player/262760/nathan-logue/...   \n",
              "19237     262820  https://sofifa.com/player/262820/luke-rudden/2...   \n",
              "19238     264540  https://sofifa.com/player/264540/emanuel-lalch...   \n",
              "\n",
              "               short_name                            long_name  \\\n",
              "0                L. Messi       Lionel Andrés Messi Cuccittini   \n",
              "1          R. Lewandowski                   Robert Lewandowski   \n",
              "2       Cristiano Ronaldo  Cristiano Ronaldo dos Santos Aveiro   \n",
              "3               Neymar Jr        Neymar da Silva Santos Júnior   \n",
              "4            K. De Bruyne                      Kevin De Bruyne   \n",
              "...                   ...                                  ...   \n",
              "19234           Song Defu                                  宋德福   \n",
              "19235           C. Porter                      Caoimhin Porter   \n",
              "19236            N. Logue              Nathan Logue-Cunningham   \n",
              "19237           L. Rudden                          Luke Rudden   \n",
              "19238  E. Lalchhanchhuaha              Emanuel Lalchhanchhuaha   \n",
              "\n",
              "      player_positions  ...  \\\n",
              "0           RW, ST, CF  ...   \n",
              "1                   ST  ...   \n",
              "2               ST, LW  ...   \n",
              "3              LW, CAM  ...   \n",
              "4              CM, CAM  ...   \n",
              "...                ...  ...   \n",
              "19234              CDM  ...   \n",
              "19235               CM  ...   \n",
              "19236               CM  ...   \n",
              "19237               ST  ...   \n",
              "19238              CAM  ...   \n",
              "\n",
              "                                         player_face_url  \\\n",
              "0      https://cdn.sofifa.net/players/158/023/22_120.png   \n",
              "1      https://cdn.sofifa.net/players/188/545/22_120.png   \n",
              "2      https://cdn.sofifa.net/players/020/801/22_120.png   \n",
              "3      https://cdn.sofifa.net/players/190/871/22_120.png   \n",
              "4      https://cdn.sofifa.net/players/192/985/22_120.png   \n",
              "...                                                  ...   \n",
              "19234  https://cdn.sofifa.net/players/261/962/22_120.png   \n",
              "19235  https://cdn.sofifa.net/players/262/040/22_120.png   \n",
              "19236  https://cdn.sofifa.net/players/262/760/22_120.png   \n",
              "19237  https://cdn.sofifa.net/players/262/820/22_120.png   \n",
              "19238  https://cdn.sofifa.net/players/264/540/22_120.png   \n",
              "\n",
              "                                    club_logo_url  \\\n",
              "0          https://cdn.sofifa.net/teams/73/60.png   \n",
              "1          https://cdn.sofifa.net/teams/21/60.png   \n",
              "2          https://cdn.sofifa.net/teams/11/60.png   \n",
              "3          https://cdn.sofifa.net/teams/73/60.png   \n",
              "4          https://cdn.sofifa.net/teams/10/60.png   \n",
              "...                                           ...   \n",
              "19234  https://cdn.sofifa.net/teams/112541/60.png   \n",
              "19235     https://cdn.sofifa.net/teams/445/60.png   \n",
              "19236  https://cdn.sofifa.net/teams/111131/60.png   \n",
              "19237  https://cdn.sofifa.net/teams/111131/60.png   \n",
              "19238  https://cdn.sofifa.net/teams/113040/60.png   \n",
              "\n",
              "                                 club_flag_url  \\\n",
              "0          https://cdn.sofifa.net/flags/fr.png   \n",
              "1          https://cdn.sofifa.net/flags/de.png   \n",
              "2      https://cdn.sofifa.net/flags/gb-eng.png   \n",
              "3          https://cdn.sofifa.net/flags/fr.png   \n",
              "4      https://cdn.sofifa.net/flags/gb-eng.png   \n",
              "...                                        ...   \n",
              "19234      https://cdn.sofifa.net/flags/cn.png   \n",
              "19235      https://cdn.sofifa.net/flags/ie.png   \n",
              "19236      https://cdn.sofifa.net/flags/ie.png   \n",
              "19237      https://cdn.sofifa.net/flags/ie.png   \n",
              "19238      https://cdn.sofifa.net/flags/in.png   \n",
              "\n",
              "                                nation_logo_url  \\\n",
              "0      https://cdn.sofifa.net/teams/1369/60.png   \n",
              "1      https://cdn.sofifa.net/teams/1353/60.png   \n",
              "2      https://cdn.sofifa.net/teams/1354/60.png   \n",
              "3                                           NaN   \n",
              "4      https://cdn.sofifa.net/teams/1325/60.png   \n",
              "...                                         ...   \n",
              "19234                                       NaN   \n",
              "19235                                       NaN   \n",
              "19236                                       NaN   \n",
              "19237                                       NaN   \n",
              "19238                                       NaN   \n",
              "\n",
              "                           nation_flag_url  \n",
              "0      https://cdn.sofifa.net/flags/ar.png  \n",
              "1      https://cdn.sofifa.net/flags/pl.png  \n",
              "2      https://cdn.sofifa.net/flags/pt.png  \n",
              "3      https://cdn.sofifa.net/flags/br.png  \n",
              "4      https://cdn.sofifa.net/flags/be.png  \n",
              "...                                    ...  \n",
              "19234  https://cdn.sofifa.net/flags/cn.png  \n",
              "19235  https://cdn.sofifa.net/flags/ie.png  \n",
              "19236  https://cdn.sofifa.net/flags/ie.png  \n",
              "19237  https://cdn.sofifa.net/flags/ie.png  \n",
              "19238  https://cdn.sofifa.net/flags/in.png  \n",
              "\n",
              "[19239 rows x 110 columns]"
            ]
          },
          "execution_count": 48,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "players_22"
      ],
      "id": "d832cf9a"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "56488cad",
        "outputId": "da4135c8-f4cb-4e27-bcc5-774fa9b113e2",
        "scrolled": true
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-1bdc07fb-0c49-4e80-ae3e-688d54727bca\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>sofifa_id</th>\n",
              "      <th>player_url</th>\n",
              "      <th>short_name</th>\n",
              "      <th>long_name</th>\n",
              "      <th>player_positions</th>\n",
              "      <th>...</th>\n",
              "      <th>player_face_url</th>\n",
              "      <th>club_logo_url</th>\n",
              "      <th>club_flag_url</th>\n",
              "      <th>nation_logo_url</th>\n",
              "      <th>nation_flag_url</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>158023</td>\n",
              "      <td>https://sofifa.com/player/158023/lionel-messi/...</td>\n",
              "      <td>L. Messi</td>\n",
              "      <td>Lionel Andrés Messi Cuccittini</td>\n",
              "      <td>RW, ST, CF</td>\n",
              "      <td>...</td>\n",
              "      <td>https://cdn.sofifa.net/players/158/023/22_120.png</td>\n",
              "      <td>https://cdn.sofifa.net/teams/73/60.png</td>\n",
              "      <td>https://cdn.sofifa.net/flags/fr.png</td>\n",
              "      <td>https://cdn.sofifa.net/teams/1369/60.png</td>\n",
              "      <td>https://cdn.sofifa.net/flags/ar.png</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>188545</td>\n",
              "      <td>https://sofifa.com/player/188545/robert-lewand...</td>\n",
              "      <td>R. Lewandowski</td>\n",
              "      <td>Robert Lewandowski</td>\n",
              "      <td>ST</td>\n",
              "      <td>...</td>\n",
              "      <td>https://cdn.sofifa.net/players/188/545/22_120.png</td>\n",
              "      <td>https://cdn.sofifa.net/teams/21/60.png</td>\n",
              "      <td>https://cdn.sofifa.net/flags/de.png</td>\n",
              "      <td>https://cdn.sofifa.net/teams/1353/60.png</td>\n",
              "      <td>https://cdn.sofifa.net/flags/pl.png</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>20801</td>\n",
              "      <td>https://sofifa.com/player/20801/c-ronaldo-dos-...</td>\n",
              "      <td>Cristiano Ronaldo</td>\n",
              "      <td>Cristiano Ronaldo dos Santos Aveiro</td>\n",
              "      <td>ST, LW</td>\n",
              "      <td>...</td>\n",
              "      <td>https://cdn.sofifa.net/players/020/801/22_120.png</td>\n",
              "      <td>https://cdn.sofifa.net/teams/11/60.png</td>\n",
              "      <td>https://cdn.sofifa.net/flags/gb-eng.png</td>\n",
              "      <td>https://cdn.sofifa.net/teams/1354/60.png</td>\n",
              "      <td>https://cdn.sofifa.net/flags/pt.png</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>190871</td>\n",
              "      <td>https://sofifa.com/player/190871/neymar-da-sil...</td>\n",
              "      <td>Neymar Jr</td>\n",
              "      <td>Neymar da Silva Santos Júnior</td>\n",
              "      <td>LW, CAM</td>\n",
              "      <td>...</td>\n",
              "      <td>https://cdn.sofifa.net/players/190/871/22_120.png</td>\n",
              "      <td>https://cdn.sofifa.net/teams/73/60.png</td>\n",
              "      <td>https://cdn.sofifa.net/flags/fr.png</td>\n",
              "      <td>NaN</td>\n",
              "      <td>https://cdn.sofifa.net/flags/br.png</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>192985</td>\n",
              "      <td>https://sofifa.com/player/192985/kevin-de-bruy...</td>\n",
              "      <td>K. De Bruyne</td>\n",
              "      <td>Kevin De Bruyne</td>\n",
              "      <td>CM, CAM</td>\n",
              "      <td>...</td>\n",
              "      <td>https://cdn.sofifa.net/players/192/985/22_120.png</td>\n",
              "      <td>https://cdn.sofifa.net/teams/10/60.png</td>\n",
              "      <td>https://cdn.sofifa.net/flags/gb-eng.png</td>\n",
              "      <td>https://cdn.sofifa.net/teams/1325/60.png</td>\n",
              "      <td>https://cdn.sofifa.net/flags/be.png</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 110 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1bdc07fb-0c49-4e80-ae3e-688d54727bca')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-1bdc07fb-0c49-4e80-ae3e-688d54727bca button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-1bdc07fb-0c49-4e80-ae3e-688d54727bca');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-29c91d15-eac2-41b7-bd45-d823714d14ff\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-29c91d15-eac2-41b7-bd45-d823714d14ff')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-29c91d15-eac2-41b7-bd45-d823714d14ff button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "   sofifa_id                                         player_url  \\\n",
              "0     158023  https://sofifa.com/player/158023/lionel-messi/...   \n",
              "1     188545  https://sofifa.com/player/188545/robert-lewand...   \n",
              "2      20801  https://sofifa.com/player/20801/c-ronaldo-dos-...   \n",
              "3     190871  https://sofifa.com/player/190871/neymar-da-sil...   \n",
              "4     192985  https://sofifa.com/player/192985/kevin-de-bruy...   \n",
              "\n",
              "          short_name                            long_name player_positions  \\\n",
              "0           L. Messi       Lionel Andrés Messi Cuccittini       RW, ST, CF   \n",
              "1     R. Lewandowski                   Robert Lewandowski               ST   \n",
              "2  Cristiano Ronaldo  Cristiano Ronaldo dos Santos Aveiro           ST, LW   \n",
              "3          Neymar Jr        Neymar da Silva Santos Júnior          LW, CAM   \n",
              "4       K. De Bruyne                      Kevin De Bruyne          CM, CAM   \n",
              "\n",
              "   ...                                    player_face_url  \\\n",
              "0  ...  https://cdn.sofifa.net/players/158/023/22_120.png   \n",
              "1  ...  https://cdn.sofifa.net/players/188/545/22_120.png   \n",
              "2  ...  https://cdn.sofifa.net/players/020/801/22_120.png   \n",
              "3  ...  https://cdn.sofifa.net/players/190/871/22_120.png   \n",
              "4  ...  https://cdn.sofifa.net/players/192/985/22_120.png   \n",
              "\n",
              "                            club_logo_url  \\\n",
              "0  https://cdn.sofifa.net/teams/73/60.png   \n",
              "1  https://cdn.sofifa.net/teams/21/60.png   \n",
              "2  https://cdn.sofifa.net/teams/11/60.png   \n",
              "3  https://cdn.sofifa.net/teams/73/60.png   \n",
              "4  https://cdn.sofifa.net/teams/10/60.png   \n",
              "\n",
              "                             club_flag_url  \\\n",
              "0      https://cdn.sofifa.net/flags/fr.png   \n",
              "1      https://cdn.sofifa.net/flags/de.png   \n",
              "2  https://cdn.sofifa.net/flags/gb-eng.png   \n",
              "3      https://cdn.sofifa.net/flags/fr.png   \n",
              "4  https://cdn.sofifa.net/flags/gb-eng.png   \n",
              "\n",
              "                            nation_logo_url  \\\n",
              "0  https://cdn.sofifa.net/teams/1369/60.png   \n",
              "1  https://cdn.sofifa.net/teams/1353/60.png   \n",
              "2  https://cdn.sofifa.net/teams/1354/60.png   \n",
              "3                                       NaN   \n",
              "4  https://cdn.sofifa.net/teams/1325/60.png   \n",
              "\n",
              "                       nation_flag_url  \n",
              "0  https://cdn.sofifa.net/flags/ar.png  \n",
              "1  https://cdn.sofifa.net/flags/pl.png  \n",
              "2  https://cdn.sofifa.net/flags/pt.png  \n",
              "3  https://cdn.sofifa.net/flags/br.png  \n",
              "4  https://cdn.sofifa.net/flags/be.png  \n",
              "\n",
              "[5 rows x 110 columns]"
            ]
          },
          "execution_count": 49,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "players_22.head()\n"
      ],
      "id": "56488cad"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "f29264bd"
      },
      "outputs": [],
      "source": [
        "players_22.set_index('short_name', inplace=True)\n"
      ],
      "id": "f29264bd"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0057f0d4",
        "outputId": "1625c4d4-1966-435e-dc61-5dfb896435c2",
        "scrolled": true
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-c2ab45fb-ebe4-473a-ab6c-78abf538bfe6\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>sofifa_id</th>\n",
              "      <th>player_url</th>\n",
              "      <th>long_name</th>\n",
              "      <th>player_positions</th>\n",
              "      <th>overall</th>\n",
              "      <th>...</th>\n",
              "      <th>player_face_url</th>\n",
              "      <th>club_logo_url</th>\n",
              "      <th>club_flag_url</th>\n",
              "      <th>nation_logo_url</th>\n",
              "      <th>nation_flag_url</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>short_name</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>L. Messi</th>\n",
              "      <td>158023</td>\n",
              "      <td>https://sofifa.com/player/158023/lionel-messi/...</td>\n",
              "      <td>Lionel Andrés Messi Cuccittini</td>\n",
              "      <td>RW, ST, CF</td>\n",
              "      <td>93</td>\n",
              "      <td>...</td>\n",
              "      <td>https://cdn.sofifa.net/players/158/023/22_120.png</td>\n",
              "      <td>https://cdn.sofifa.net/teams/73/60.png</td>\n",
              "      <td>https://cdn.sofifa.net/flags/fr.png</td>\n",
              "      <td>https://cdn.sofifa.net/teams/1369/60.png</td>\n",
              "      <td>https://cdn.sofifa.net/flags/ar.png</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>R. Lewandowski</th>\n",
              "      <td>188545</td>\n",
              "      <td>https://sofifa.com/player/188545/robert-lewand...</td>\n",
              "      <td>Robert Lewandowski</td>\n",
              "      <td>ST</td>\n",
              "      <td>92</td>\n",
              "      <td>...</td>\n",
              "      <td>https://cdn.sofifa.net/players/188/545/22_120.png</td>\n",
              "      <td>https://cdn.sofifa.net/teams/21/60.png</td>\n",
              "      <td>https://cdn.sofifa.net/flags/de.png</td>\n",
              "      <td>https://cdn.sofifa.net/teams/1353/60.png</td>\n",
              "      <td>https://cdn.sofifa.net/flags/pl.png</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Cristiano Ronaldo</th>\n",
              "      <td>20801</td>\n",
              "      <td>https://sofifa.com/player/20801/c-ronaldo-dos-...</td>\n",
              "      <td>Cristiano Ronaldo dos Santos Aveiro</td>\n",
              "      <td>ST, LW</td>\n",
              "      <td>91</td>\n",
              "      <td>...</td>\n",
              "      <td>https://cdn.sofifa.net/players/020/801/22_120.png</td>\n",
              "      <td>https://cdn.sofifa.net/teams/11/60.png</td>\n",
              "      <td>https://cdn.sofifa.net/flags/gb-eng.png</td>\n",
              "      <td>https://cdn.sofifa.net/teams/1354/60.png</td>\n",
              "      <td>https://cdn.sofifa.net/flags/pt.png</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Neymar Jr</th>\n",
              "      <td>190871</td>\n",
              "      <td>https://sofifa.com/player/190871/neymar-da-sil...</td>\n",
              "      <td>Neymar da Silva Santos Júnior</td>\n",
              "      <td>LW, CAM</td>\n",
              "      <td>91</td>\n",
              "      <td>...</td>\n",
              "      <td>https://cdn.sofifa.net/players/190/871/22_120.png</td>\n",
              "      <td>https://cdn.sofifa.net/teams/73/60.png</td>\n",
              "      <td>https://cdn.sofifa.net/flags/fr.png</td>\n",
              "      <td>NaN</td>\n",
              "      <td>https://cdn.sofifa.net/flags/br.png</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>K. De Bruyne</th>\n",
              "      <td>192985</td>\n",
              "      <td>https://sofifa.com/player/192985/kevin-de-bruy...</td>\n",
              "      <td>Kevin De Bruyne</td>\n",
              "      <td>CM, CAM</td>\n",
              "      <td>91</td>\n",
              "      <td>...</td>\n",
              "      <td>https://cdn.sofifa.net/players/192/985/22_120.png</td>\n",
              "      <td>https://cdn.sofifa.net/teams/10/60.png</td>\n",
              "      <td>https://cdn.sofifa.net/flags/gb-eng.png</td>\n",
              "      <td>https://cdn.sofifa.net/teams/1325/60.png</td>\n",
              "      <td>https://cdn.sofifa.net/flags/be.png</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Song Defu</th>\n",
              "      <td>261962</td>\n",
              "      <td>https://sofifa.com/player/261962/defu-song/220002</td>\n",
              "      <td>宋德福</td>\n",
              "      <td>CDM</td>\n",
              "      <td>47</td>\n",
              "      <td>...</td>\n",
              "      <td>https://cdn.sofifa.net/players/261/962/22_120.png</td>\n",
              "      <td>https://cdn.sofifa.net/teams/112541/60.png</td>\n",
              "      <td>https://cdn.sofifa.net/flags/cn.png</td>\n",
              "      <td>NaN</td>\n",
              "      <td>https://cdn.sofifa.net/flags/cn.png</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>C. Porter</th>\n",
              "      <td>262040</td>\n",
              "      <td>https://sofifa.com/player/262040/caoimhin-port...</td>\n",
              "      <td>Caoimhin Porter</td>\n",
              "      <td>CM</td>\n",
              "      <td>47</td>\n",
              "      <td>...</td>\n",
              "      <td>https://cdn.sofifa.net/players/262/040/22_120.png</td>\n",
              "      <td>https://cdn.sofifa.net/teams/445/60.png</td>\n",
              "      <td>https://cdn.sofifa.net/flags/ie.png</td>\n",
              "      <td>NaN</td>\n",
              "      <td>https://cdn.sofifa.net/flags/ie.png</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>N. Logue</th>\n",
              "      <td>262760</td>\n",
              "      <td>https://sofifa.com/player/262760/nathan-logue/...</td>\n",
              "      <td>Nathan Logue-Cunningham</td>\n",
              "      <td>CM</td>\n",
              "      <td>47</td>\n",
              "      <td>...</td>\n",
              "      <td>https://cdn.sofifa.net/players/262/760/22_120.png</td>\n",
              "      <td>https://cdn.sofifa.net/teams/111131/60.png</td>\n",
              "      <td>https://cdn.sofifa.net/flags/ie.png</td>\n",
              "      <td>NaN</td>\n",
              "      <td>https://cdn.sofifa.net/flags/ie.png</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>L. Rudden</th>\n",
              "      <td>262820</td>\n",
              "      <td>https://sofifa.com/player/262820/luke-rudden/2...</td>\n",
              "      <td>Luke Rudden</td>\n",
              "      <td>ST</td>\n",
              "      <td>47</td>\n",
              "      <td>...</td>\n",
              "      <td>https://cdn.sofifa.net/players/262/820/22_120.png</td>\n",
              "      <td>https://cdn.sofifa.net/teams/111131/60.png</td>\n",
              "      <td>https://cdn.sofifa.net/flags/ie.png</td>\n",
              "      <td>NaN</td>\n",
              "      <td>https://cdn.sofifa.net/flags/ie.png</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>E. Lalchhanchhuaha</th>\n",
              "      <td>264540</td>\n",
              "      <td>https://sofifa.com/player/264540/emanuel-lalch...</td>\n",
              "      <td>Emanuel Lalchhanchhuaha</td>\n",
              "      <td>CAM</td>\n",
              "      <td>47</td>\n",
              "      <td>...</td>\n",
              "      <td>https://cdn.sofifa.net/players/264/540/22_120.png</td>\n",
              "      <td>https://cdn.sofifa.net/teams/113040/60.png</td>\n",
              "      <td>https://cdn.sofifa.net/flags/in.png</td>\n",
              "      <td>NaN</td>\n",
              "      <td>https://cdn.sofifa.net/flags/in.png</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>19239 rows × 109 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c2ab45fb-ebe4-473a-ab6c-78abf538bfe6')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c2ab45fb-ebe4-473a-ab6c-78abf538bfe6 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c2ab45fb-ebe4-473a-ab6c-78abf538bfe6');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-3c10e1a8-aed6-4597-a975-40c60d8dab93\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3c10e1a8-aed6-4597-a975-40c60d8dab93')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-3c10e1a8-aed6-4597-a975-40c60d8dab93 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "                    sofifa_id  \\\n",
              "short_name                      \n",
              "L. Messi               158023   \n",
              "R. Lewandowski         188545   \n",
              "Cristiano Ronaldo       20801   \n",
              "Neymar Jr              190871   \n",
              "K. De Bruyne           192985   \n",
              "...                       ...   \n",
              "Song Defu              261962   \n",
              "C. Porter              262040   \n",
              "N. Logue               262760   \n",
              "L. Rudden              262820   \n",
              "E. Lalchhanchhuaha     264540   \n",
              "\n",
              "                                                           player_url  \\\n",
              "short_name                                                              \n",
              "L. Messi            https://sofifa.com/player/158023/lionel-messi/...   \n",
              "R. Lewandowski      https://sofifa.com/player/188545/robert-lewand...   \n",
              "Cristiano Ronaldo   https://sofifa.com/player/20801/c-ronaldo-dos-...   \n",
              "Neymar Jr           https://sofifa.com/player/190871/neymar-da-sil...   \n",
              "K. De Bruyne        https://sofifa.com/player/192985/kevin-de-bruy...   \n",
              "...                                                               ...   \n",
              "Song Defu           https://sofifa.com/player/261962/defu-song/220002   \n",
              "C. Porter           https://sofifa.com/player/262040/caoimhin-port...   \n",
              "N. Logue            https://sofifa.com/player/262760/nathan-logue/...   \n",
              "L. Rudden           https://sofifa.com/player/262820/luke-rudden/2...   \n",
              "E. Lalchhanchhuaha  https://sofifa.com/player/264540/emanuel-lalch...   \n",
              "\n",
              "                                              long_name player_positions  \\\n",
              "short_name                                                                 \n",
              "L. Messi                 Lionel Andrés Messi Cuccittini       RW, ST, CF   \n",
              "R. Lewandowski                       Robert Lewandowski               ST   \n",
              "Cristiano Ronaldo   Cristiano Ronaldo dos Santos Aveiro           ST, LW   \n",
              "Neymar Jr                 Neymar da Silva Santos Júnior          LW, CAM   \n",
              "K. De Bruyne                            Kevin De Bruyne          CM, CAM   \n",
              "...                                                 ...              ...   \n",
              "Song Defu                                           宋德福              CDM   \n",
              "C. Porter                               Caoimhin Porter               CM   \n",
              "N. Logue                        Nathan Logue-Cunningham               CM   \n",
              "L. Rudden                                   Luke Rudden               ST   \n",
              "E. Lalchhanchhuaha              Emanuel Lalchhanchhuaha              CAM   \n",
              "\n",
              "                    overall  ...  \\\n",
              "short_name                   ...   \n",
              "L. Messi                 93  ...   \n",
              "R. Lewandowski           92  ...   \n",
              "Cristiano Ronaldo        91  ...   \n",
              "Neymar Jr                91  ...   \n",
              "K. De Bruyne             91  ...   \n",
              "...                     ...  ...   \n",
              "Song Defu                47  ...   \n",
              "C. Porter                47  ...   \n",
              "N. Logue                 47  ...   \n",
              "L. Rudden                47  ...   \n",
              "E. Lalchhanchhuaha       47  ...   \n",
              "\n",
              "                                                      player_face_url  \\\n",
              "short_name                                                              \n",
              "L. Messi            https://cdn.sofifa.net/players/158/023/22_120.png   \n",
              "R. Lewandowski      https://cdn.sofifa.net/players/188/545/22_120.png   \n",
              "Cristiano Ronaldo   https://cdn.sofifa.net/players/020/801/22_120.png   \n",
              "Neymar Jr           https://cdn.sofifa.net/players/190/871/22_120.png   \n",
              "K. De Bruyne        https://cdn.sofifa.net/players/192/985/22_120.png   \n",
              "...                                                               ...   \n",
              "Song Defu           https://cdn.sofifa.net/players/261/962/22_120.png   \n",
              "C. Porter           https://cdn.sofifa.net/players/262/040/22_120.png   \n",
              "N. Logue            https://cdn.sofifa.net/players/262/760/22_120.png   \n",
              "L. Rudden           https://cdn.sofifa.net/players/262/820/22_120.png   \n",
              "E. Lalchhanchhuaha  https://cdn.sofifa.net/players/264/540/22_120.png   \n",
              "\n",
              "                                                 club_logo_url  \\\n",
              "short_name                                                       \n",
              "L. Messi                https://cdn.sofifa.net/teams/73/60.png   \n",
              "R. Lewandowski          https://cdn.sofifa.net/teams/21/60.png   \n",
              "Cristiano Ronaldo       https://cdn.sofifa.net/teams/11/60.png   \n",
              "Neymar Jr               https://cdn.sofifa.net/teams/73/60.png   \n",
              "K. De Bruyne            https://cdn.sofifa.net/teams/10/60.png   \n",
              "...                                                        ...   \n",
              "Song Defu           https://cdn.sofifa.net/teams/112541/60.png   \n",
              "C. Porter              https://cdn.sofifa.net/teams/445/60.png   \n",
              "N. Logue            https://cdn.sofifa.net/teams/111131/60.png   \n",
              "L. Rudden           https://cdn.sofifa.net/teams/111131/60.png   \n",
              "E. Lalchhanchhuaha  https://cdn.sofifa.net/teams/113040/60.png   \n",
              "\n",
              "                                              club_flag_url  \\\n",
              "short_name                                                    \n",
              "L. Messi                https://cdn.sofifa.net/flags/fr.png   \n",
              "R. Lewandowski          https://cdn.sofifa.net/flags/de.png   \n",
              "Cristiano Ronaldo   https://cdn.sofifa.net/flags/gb-eng.png   \n",
              "Neymar Jr               https://cdn.sofifa.net/flags/fr.png   \n",
              "K. De Bruyne        https://cdn.sofifa.net/flags/gb-eng.png   \n",
              "...                                                     ...   \n",
              "Song Defu               https://cdn.sofifa.net/flags/cn.png   \n",
              "C. Porter               https://cdn.sofifa.net/flags/ie.png   \n",
              "N. Logue                https://cdn.sofifa.net/flags/ie.png   \n",
              "L. Rudden               https://cdn.sofifa.net/flags/ie.png   \n",
              "E. Lalchhanchhuaha      https://cdn.sofifa.net/flags/in.png   \n",
              "\n",
              "                                             nation_logo_url  \\\n",
              "short_name                                                     \n",
              "L. Messi            https://cdn.sofifa.net/teams/1369/60.png   \n",
              "R. Lewandowski      https://cdn.sofifa.net/teams/1353/60.png   \n",
              "Cristiano Ronaldo   https://cdn.sofifa.net/teams/1354/60.png   \n",
              "Neymar Jr                                                NaN   \n",
              "K. De Bruyne        https://cdn.sofifa.net/teams/1325/60.png   \n",
              "...                                                      ...   \n",
              "Song Defu                                                NaN   \n",
              "C. Porter                                                NaN   \n",
              "N. Logue                                                 NaN   \n",
              "L. Rudden                                                NaN   \n",
              "E. Lalchhanchhuaha                                       NaN   \n",
              "\n",
              "                                        nation_flag_url  \n",
              "short_name                                               \n",
              "L. Messi            https://cdn.sofifa.net/flags/ar.png  \n",
              "R. Lewandowski      https://cdn.sofifa.net/flags/pl.png  \n",
              "Cristiano Ronaldo   https://cdn.sofifa.net/flags/pt.png  \n",
              "Neymar Jr           https://cdn.sofifa.net/flags/br.png  \n",
              "K. De Bruyne        https://cdn.sofifa.net/flags/be.png  \n",
              "...                                                 ...  \n",
              "Song Defu           https://cdn.sofifa.net/flags/cn.png  \n",
              "C. Porter           https://cdn.sofifa.net/flags/ie.png  \n",
              "N. Logue            https://cdn.sofifa.net/flags/ie.png  \n",
              "L. Rudden           https://cdn.sofifa.net/flags/ie.png  \n",
              "E. Lalchhanchhuaha  https://cdn.sofifa.net/flags/in.png  \n",
              "\n",
              "[19239 rows x 109 columns]"
            ]
          },
          "execution_count": 51,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "players_22"
      ],
      "id": "0057f0d4"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "f0e0bb83",
        "outputId": "ef9c98ff-6dec-4771-a906-225f1c1e170d",
        "scrolled": true
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "Index: 19239 entries, L. Messi to E. Lalchhanchhuaha\n",
            "Columns: 109 entries, sofifa_id to nation_flag_url\n",
            "dtypes: float64(16), int64(44), object(49)\n",
            "memory usage: 16.1+ MB\n"
          ]
        }
      ],
      "source": [
        "players_22.info()\n"
      ],
      "id": "f0e0bb83"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5e4467cf",
        "outputId": "a6856231-56c6-4d10-dda4-9ba2047ea1e3",
        "scrolled": true
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-6b5526e7-12e1-45e4-95b4-d870b8221329\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>sofifa_id</th>\n",
              "      <th>overall</th>\n",
              "      <th>potential</th>\n",
              "      <th>value_eur</th>\n",
              "      <th>wage_eur</th>\n",
              "      <th>...</th>\n",
              "      <th>goalkeeping_handling</th>\n",
              "      <th>goalkeeping_kicking</th>\n",
              "      <th>goalkeeping_positioning</th>\n",
              "      <th>goalkeeping_reflexes</th>\n",
              "      <th>goalkeeping_speed</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>19239.000000</td>\n",
              "      <td>19239.000000</td>\n",
              "      <td>19239.000000</td>\n",
              "      <td>1.916500e+04</td>\n",
              "      <td>19178.000000</td>\n",
              "      <td>...</td>\n",
              "      <td>19239.000000</td>\n",
              "      <td>19239.000000</td>\n",
              "      <td>19239.000000</td>\n",
              "      <td>19239.000000</td>\n",
              "      <td>2132.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>231468.086959</td>\n",
              "      <td>65.772182</td>\n",
              "      <td>71.079370</td>\n",
              "      <td>2.850452e+06</td>\n",
              "      <td>9017.989363</td>\n",
              "      <td>...</td>\n",
              "      <td>16.192474</td>\n",
              "      <td>16.055356</td>\n",
              "      <td>16.229274</td>\n",
              "      <td>16.491814</td>\n",
              "      <td>36.439962</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>27039.717497</td>\n",
              "      <td>6.880232</td>\n",
              "      <td>6.086213</td>\n",
              "      <td>7.613700e+06</td>\n",
              "      <td>19470.176724</td>\n",
              "      <td>...</td>\n",
              "      <td>16.839528</td>\n",
              "      <td>16.564554</td>\n",
              "      <td>17.059779</td>\n",
              "      <td>17.884833</td>\n",
              "      <td>10.751563</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>41.000000</td>\n",
              "      <td>47.000000</td>\n",
              "      <td>49.000000</td>\n",
              "      <td>9.000000e+03</td>\n",
              "      <td>500.000000</td>\n",
              "      <td>...</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>15.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>214413.500000</td>\n",
              "      <td>61.000000</td>\n",
              "      <td>67.000000</td>\n",
              "      <td>4.750000e+05</td>\n",
              "      <td>1000.000000</td>\n",
              "      <td>...</td>\n",
              "      <td>8.000000</td>\n",
              "      <td>8.000000</td>\n",
              "      <td>8.000000</td>\n",
              "      <td>8.000000</td>\n",
              "      <td>27.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>236543.000000</td>\n",
              "      <td>66.000000</td>\n",
              "      <td>71.000000</td>\n",
              "      <td>9.750000e+05</td>\n",
              "      <td>3000.000000</td>\n",
              "      <td>...</td>\n",
              "      <td>11.000000</td>\n",
              "      <td>11.000000</td>\n",
              "      <td>11.000000</td>\n",
              "      <td>11.000000</td>\n",
              "      <td>36.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>253532.500000</td>\n",
              "      <td>70.000000</td>\n",
              "      <td>75.000000</td>\n",
              "      <td>2.000000e+06</td>\n",
              "      <td>8000.000000</td>\n",
              "      <td>...</td>\n",
              "      <td>14.000000</td>\n",
              "      <td>14.000000</td>\n",
              "      <td>14.000000</td>\n",
              "      <td>14.000000</td>\n",
              "      <td>45.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>264640.000000</td>\n",
              "      <td>93.000000</td>\n",
              "      <td>95.000000</td>\n",
              "      <td>1.940000e+08</td>\n",
              "      <td>350000.000000</td>\n",
              "      <td>...</td>\n",
              "      <td>92.000000</td>\n",
              "      <td>93.000000</td>\n",
              "      <td>92.000000</td>\n",
              "      <td>90.000000</td>\n",
              "      <td>65.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>8 rows × 60 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6b5526e7-12e1-45e4-95b4-d870b8221329')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-6b5526e7-12e1-45e4-95b4-d870b8221329 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-6b5526e7-12e1-45e4-95b4-d870b8221329');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-47a1b8f8-c962-4ce7-b178-6e11d77d017a\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-47a1b8f8-c962-4ce7-b178-6e11d77d017a')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-47a1b8f8-c962-4ce7-b178-6e11d77d017a button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "           sofifa_id       overall     potential     value_eur       wage_eur  \\\n",
              "count   19239.000000  19239.000000  19239.000000  1.916500e+04   19178.000000   \n",
              "mean   231468.086959     65.772182     71.079370  2.850452e+06    9017.989363   \n",
              "std     27039.717497      6.880232      6.086213  7.613700e+06   19470.176724   \n",
              "min        41.000000     47.000000     49.000000  9.000000e+03     500.000000   \n",
              "25%    214413.500000     61.000000     67.000000  4.750000e+05    1000.000000   \n",
              "50%    236543.000000     66.000000     71.000000  9.750000e+05    3000.000000   \n",
              "75%    253532.500000     70.000000     75.000000  2.000000e+06    8000.000000   \n",
              "max    264640.000000     93.000000     95.000000  1.940000e+08  350000.000000   \n",
              "\n",
              "       ...  goalkeeping_handling  goalkeeping_kicking  \\\n",
              "count  ...          19239.000000         19239.000000   \n",
              "mean   ...             16.192474            16.055356   \n",
              "std    ...             16.839528            16.564554   \n",
              "min    ...              2.000000             2.000000   \n",
              "25%    ...              8.000000             8.000000   \n",
              "50%    ...             11.000000            11.000000   \n",
              "75%    ...             14.000000            14.000000   \n",
              "max    ...             92.000000            93.000000   \n",
              "\n",
              "       goalkeeping_positioning  goalkeeping_reflexes  goalkeeping_speed  \n",
              "count             19239.000000          19239.000000        2132.000000  \n",
              "mean                 16.229274             16.491814          36.439962  \n",
              "std                  17.059779             17.884833          10.751563  \n",
              "min                   2.000000              2.000000          15.000000  \n",
              "25%                   8.000000              8.000000          27.000000  \n",
              "50%                  11.000000             11.000000          36.000000  \n",
              "75%                  14.000000             14.000000          45.000000  \n",
              "max                  92.000000             90.000000          65.000000  \n",
              "\n",
              "[8 rows x 60 columns]"
            ]
          },
          "execution_count": 53,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "players_22.describe()"
      ],
      "id": "5e4467cf"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "145027d2"
      },
      "outputs": [],
      "source": [
        "pd.set_option('display.max_rows', None)\n",
        "pd.set_option('display.max_columns', None)"
      ],
      "id": "145027d2"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UUrVGDlAFzUT"
      },
      "source": [
        "**Data Cleaning**"
      ],
      "id": "UUrVGDlAFzUT"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "73ff8076"
      },
      "outputs": [],
      "source": [
        "players_22 = players_22.drop(columns=useless_columns)"
      ],
      "id": "73ff8076"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "f9c42c98",
        "outputId": "ff7562e7-2b17-4e4d-9c38-5505530e6728",
        "scrolled": true
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "player_positions               False\n",
              "overall                        False\n",
              "potential                      False\n",
              "value_eur                       True\n",
              "wage_eur                        True\n",
              "age                            False\n",
              "height_cm                      False\n",
              "weight_kg                      False\n",
              "club_name                       True\n",
              "league_name                     True\n",
              "league_level                    True\n",
              "club_position                   True\n",
              "club_joined                     True\n",
              "club_contract_valid_until       True\n",
              "nationality_name               False\n",
              "nation_position                 True\n",
              "preferred_foot                 False\n",
              "weak_foot                      False\n",
              "skill_moves                    False\n",
              "international_reputation       False\n",
              "work_rate                      False\n",
              "body_type                      False\n",
              "release_clause_eur              True\n",
              "pace                            True\n",
              "shooting                        True\n",
              "passing                         True\n",
              "dribbling                       True\n",
              "defending                       True\n",
              "physic                          True\n",
              "attacking_crossing             False\n",
              "attacking_finishing            False\n",
              "attacking_heading_accuracy     False\n",
              "attacking_short_passing        False\n",
              "attacking_volleys              False\n",
              "skill_dribbling                False\n",
              "skill_curve                    False\n",
              "skill_fk_accuracy              False\n",
              "skill_long_passing             False\n",
              "skill_ball_control             False\n",
              "movement_acceleration          False\n",
              "movement_sprint_speed          False\n",
              "movement_agility               False\n",
              "movement_reactions             False\n",
              "movement_balance               False\n",
              "power_shot_power               False\n",
              "power_jumping                  False\n",
              "power_stamina                  False\n",
              "power_strength                 False\n",
              "power_long_shots               False\n",
              "mentality_aggression           False\n",
              "mentality_interceptions        False\n",
              "mentality_positioning          False\n",
              "mentality_vision               False\n",
              "mentality_penalties            False\n",
              "mentality_composure            False\n",
              "defending_marking_awareness    False\n",
              "defending_standing_tackle      False\n",
              "defending_sliding_tackle       False\n",
              "goalkeeping_diving             False\n",
              "goalkeeping_handling           False\n",
              "goalkeeping_kicking            False\n",
              "goalkeeping_positioning        False\n",
              "goalkeeping_reflexes           False\n",
              "goalkeeping_speed               True\n",
              "ls                             False\n",
              "st                             False\n",
              "rs                             False\n",
              "lw                             False\n",
              "lf                             False\n",
              "cf                             False\n",
              "rf                             False\n",
              "rw                             False\n",
              "lam                            False\n",
              "cam                            False\n",
              "ram                            False\n",
              "lm                             False\n",
              "lcm                            False\n",
              "cm                             False\n",
              "rcm                            False\n",
              "rm                             False\n",
              "lwb                            False\n",
              "ldm                            False\n",
              "cdm                            False\n",
              "rdm                            False\n",
              "rwb                            False\n",
              "lb                             False\n",
              "lcb                            False\n",
              "cb                             False\n",
              "rcb                            False\n",
              "rb                             False\n",
              "gk                             False\n",
              "dtype: bool"
            ]
          },
          "execution_count": 56,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "players_22.isna().any()"
      ],
      "id": "f9c42c98"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "d0e06f78"
      },
      "outputs": [],
      "source": [
        "players_22[num_cols] = num_imputer.fit_transform(players_22[num_cols])"
      ],
      "id": "d0e06f78"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "49916b00"
      },
      "outputs": [],
      "source": [
        "players_22[cat_cols] = cat_imputer.fit_transform(players_22[cat_cols])"
      ],
      "id": "49916b00"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "4cb46214"
      },
      "outputs": [],
      "source": [
        "players_22['release_clause_eur'].fillna(0, inplace=True)"
      ],
      "id": "4cb46214"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "60daae5c",
        "outputId": "ce2566dd-d584-4667-f835-d1c859fdb9ad"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "player_positions               False\n",
              "overall                        False\n",
              "potential                      False\n",
              "value_eur                      False\n",
              "wage_eur                       False\n",
              "age                            False\n",
              "height_cm                      False\n",
              "weight_kg                      False\n",
              "club_name                      False\n",
              "league_name                    False\n",
              "league_level                   False\n",
              "club_position                  False\n",
              "club_joined                    False\n",
              "club_contract_valid_until      False\n",
              "nationality_name               False\n",
              "nation_position                False\n",
              "preferred_foot                 False\n",
              "weak_foot                      False\n",
              "skill_moves                    False\n",
              "international_reputation       False\n",
              "work_rate                      False\n",
              "body_type                      False\n",
              "release_clause_eur             False\n",
              "pace                           False\n",
              "shooting                       False\n",
              "passing                        False\n",
              "dribbling                      False\n",
              "defending                      False\n",
              "physic                         False\n",
              "attacking_crossing             False\n",
              "attacking_finishing            False\n",
              "attacking_heading_accuracy     False\n",
              "attacking_short_passing        False\n",
              "attacking_volleys              False\n",
              "skill_dribbling                False\n",
              "skill_curve                    False\n",
              "skill_fk_accuracy              False\n",
              "skill_long_passing             False\n",
              "skill_ball_control             False\n",
              "movement_acceleration          False\n",
              "movement_sprint_speed          False\n",
              "movement_agility               False\n",
              "movement_reactions             False\n",
              "movement_balance               False\n",
              "power_shot_power               False\n",
              "power_jumping                  False\n",
              "power_stamina                  False\n",
              "power_strength                 False\n",
              "power_long_shots               False\n",
              "mentality_aggression           False\n",
              "mentality_interceptions        False\n",
              "mentality_positioning          False\n",
              "mentality_vision               False\n",
              "mentality_penalties            False\n",
              "mentality_composure            False\n",
              "defending_marking_awareness    False\n",
              "defending_standing_tackle      False\n",
              "defending_sliding_tackle       False\n",
              "goalkeeping_diving             False\n",
              "goalkeeping_handling           False\n",
              "goalkeeping_kicking            False\n",
              "goalkeeping_positioning        False\n",
              "goalkeeping_reflexes           False\n",
              "goalkeeping_speed              False\n",
              "ls                             False\n",
              "st                             False\n",
              "rs                             False\n",
              "lw                             False\n",
              "lf                             False\n",
              "cf                             False\n",
              "rf                             False\n",
              "rw                             False\n",
              "lam                            False\n",
              "cam                            False\n",
              "ram                            False\n",
              "lm                             False\n",
              "lcm                            False\n",
              "cm                             False\n",
              "rcm                            False\n",
              "rm                             False\n",
              "lwb                            False\n",
              "ldm                            False\n",
              "cdm                            False\n",
              "rdm                            False\n",
              "rwb                            False\n",
              "lb                             False\n",
              "lcb                            False\n",
              "cb                             False\n",
              "rcb                            False\n",
              "rb                             False\n",
              "gk                             False\n",
              "dtype: bool"
            ]
          },
          "execution_count": 60,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "players_22.isna().any()"
      ],
      "id": "60daae5c"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "VUQn36IUEN_t"
      },
      "source": [
        "**Exploratory Data Analysis**"
      ],
      "id": "VUQn36IUEN_t"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "OiX2g97_F9OG"
      },
      "source": [
        "Overall rating distribution"
      ],
      "id": "OiX2g97_F9OG"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5IiFyjEKEAN8",
        "outputId": "6c888d55-c65f-4120-ff41-0c3aa1185997"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "plt.hist(players_22['overall'], bins=30)\n",
        "plt.title('Distribution of Overall Rating')\n",
        "plt.show()\n"
      ],
      "id": "5IiFyjEKEAN8"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-npethQQF6CI"
      },
      "source": [
        "Correlation Matrix"
      ],
      "id": "-npethQQF6CI"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "plrQ8tbVEBOv",
        "outputId": "4aaea371-c360-438a-e36c-e946dfd34a74"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "<ipython-input-62-1e958f9a87dc>:1: FutureWarning: The default value of numeric_only in DataFrame.corr is deprecated. In a future version, it will default to False. Select only valid columns or specify the value of numeric_only to silence this warning.\n",
            "  corr_matrix = players_22.corr()\n"
          ]
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "corr_matrix = players_22.corr()\n",
        "sns.heatmap(corr_matrix)\n",
        "plt.title('Correlation Matrix')\n",
        "plt.show()\n"
      ],
      "id": "plrQ8tbVEBOv"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UdIzTAi3EWcC"
      },
      "source": [
        "**Feature Engineering**"
      ],
      "id": "UdIzTAi3EWcC"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "212adc24"
      },
      "outputs": [],
      "source": [
        "players_22 = pd.get_dummies(players_22, columns=categorical)\n"
      ],
      "id": "212adc24"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "78b7c9c6"
      },
      "outputs": [],
      "source": [
        "#Dropping values after + or -\n",
        "for col in columns1:\n",
        "    players_22[col] = players_22[col].str.split('+', n = 1, expand = True)[0]\n",
        "    players_22[col] = players_22[col].str.split('-', n = 1, expand = True)[0]"
      ],
      "id": "78b7c9c6"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "KG85xyiII2Y4"
      },
      "outputs": [],
      "source": [
        "pd.set_option('display.max_rows', 10)\n",
        "pd.set_option('display.max_columns', 10)"
      ],
      "id": "KG85xyiII2Y4"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "d1ee6fab",
        "outputId": "fad3887e-c9c4-4be3-fa1d-8fe16d350147"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-39ee8c98-d431-4f7b-a0d2-b4d8208ca5ae\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ls</th>\n",
              "      <th>st</th>\n",
              "      <th>rs</th>\n",
              "      <th>lw</th>\n",
              "      <th>lf</th>\n",
              "      <th>...</th>\n",
              "      <th>lcb</th>\n",
              "      <th>cb</th>\n",
              "      <th>rcb</th>\n",
              "      <th>rb</th>\n",
              "      <th>gk</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>short_name</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>L. Messi</th>\n",
              "      <td>89</td>\n",
              "      <td>89</td>\n",
              "      <td>89</td>\n",
              "      <td>92</td>\n",
              "      <td>93</td>\n",
              "      <td>...</td>\n",
              "      <td>50</td>\n",
              "      <td>50</td>\n",
              "      <td>50</td>\n",
              "      <td>61</td>\n",
              "      <td>19</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>R. Lewandowski</th>\n",
              "      <td>90</td>\n",
              "      <td>90</td>\n",
              "      <td>90</td>\n",
              "      <td>85</td>\n",
              "      <td>88</td>\n",
              "      <td>...</td>\n",
              "      <td>60</td>\n",
              "      <td>60</td>\n",
              "      <td>60</td>\n",
              "      <td>61</td>\n",
              "      <td>19</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Cristiano Ronaldo</th>\n",
              "      <td>90</td>\n",
              "      <td>90</td>\n",
              "      <td>90</td>\n",
              "      <td>88</td>\n",
              "      <td>89</td>\n",
              "      <td>...</td>\n",
              "      <td>53</td>\n",
              "      <td>53</td>\n",
              "      <td>53</td>\n",
              "      <td>60</td>\n",
              "      <td>20</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Neymar Jr</th>\n",
              "      <td>83</td>\n",
              "      <td>83</td>\n",
              "      <td>83</td>\n",
              "      <td>90</td>\n",
              "      <td>88</td>\n",
              "      <td>...</td>\n",
              "      <td>50</td>\n",
              "      <td>50</td>\n",
              "      <td>50</td>\n",
              "      <td>62</td>\n",
              "      <td>20</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>K. De Bruyne</th>\n",
              "      <td>83</td>\n",
              "      <td>83</td>\n",
              "      <td>83</td>\n",
              "      <td>88</td>\n",
              "      <td>87</td>\n",
              "      <td>...</td>\n",
              "      <td>69</td>\n",
              "      <td>69</td>\n",
              "      <td>69</td>\n",
              "      <td>75</td>\n",
              "      <td>21</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Song Defu</th>\n",
              "      <td>44</td>\n",
              "      <td>44</td>\n",
              "      <td>44</td>\n",
              "      <td>46</td>\n",
              "      <td>45</td>\n",
              "      <td>...</td>\n",
              "      <td>46</td>\n",
              "      <td>46</td>\n",
              "      <td>46</td>\n",
              "      <td>48</td>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>C. Porter</th>\n",
              "      <td>45</td>\n",
              "      <td>45</td>\n",
              "      <td>45</td>\n",
              "      <td>47</td>\n",
              "      <td>46</td>\n",
              "      <td>...</td>\n",
              "      <td>44</td>\n",
              "      <td>44</td>\n",
              "      <td>44</td>\n",
              "      <td>48</td>\n",
              "      <td>14</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>N. Logue</th>\n",
              "      <td>45</td>\n",
              "      <td>45</td>\n",
              "      <td>45</td>\n",
              "      <td>46</td>\n",
              "      <td>46</td>\n",
              "      <td>...</td>\n",
              "      <td>45</td>\n",
              "      <td>45</td>\n",
              "      <td>45</td>\n",
              "      <td>47</td>\n",
              "      <td>12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>L. Rudden</th>\n",
              "      <td>47</td>\n",
              "      <td>47</td>\n",
              "      <td>47</td>\n",
              "      <td>47</td>\n",
              "      <td>47</td>\n",
              "      <td>...</td>\n",
              "      <td>26</td>\n",
              "      <td>26</td>\n",
              "      <td>26</td>\n",
              "      <td>32</td>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>E. Lalchhanchhuaha</th>\n",
              "      <td>45</td>\n",
              "      <td>45</td>\n",
              "      <td>45</td>\n",
              "      <td>47</td>\n",
              "      <td>47</td>\n",
              "      <td>...</td>\n",
              "      <td>41</td>\n",
              "      <td>41</td>\n",
              "      <td>41</td>\n",
              "      <td>45</td>\n",
              "      <td>16</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>19239 rows × 27 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-39ee8c98-d431-4f7b-a0d2-b4d8208ca5ae')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-39ee8c98-d431-4f7b-a0d2-b4d8208ca5ae button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-39ee8c98-d431-4f7b-a0d2-b4d8208ca5ae');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-99611131-6c6f-43dc-87ed-69d040813ce9\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-99611131-6c6f-43dc-87ed-69d040813ce9')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-99611131-6c6f-43dc-87ed-69d040813ce9 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "                    ls  st  rs  lw  lf  ... lcb  cb rcb  rb  gk\n",
              "short_name                              ...                    \n",
              "L. Messi            89  89  89  92  93  ...  50  50  50  61  19\n",
              "R. Lewandowski      90  90  90  85  88  ...  60  60  60  61  19\n",
              "Cristiano Ronaldo   90  90  90  88  89  ...  53  53  53  60  20\n",
              "Neymar Jr           83  83  83  90  88  ...  50  50  50  62  20\n",
              "K. De Bruyne        83  83  83  88  87  ...  69  69  69  75  21\n",
              "...                 ..  ..  ..  ..  ..  ...  ..  ..  ..  ..  ..\n",
              "Song Defu           44  44  44  46  45  ...  46  46  46  48  15\n",
              "C. Porter           45  45  45  47  46  ...  44  44  44  48  14\n",
              "N. Logue            45  45  45  46  46  ...  45  45  45  47  12\n",
              "L. Rudden           47  47  47  47  47  ...  26  26  26  32  15\n",
              "E. Lalchhanchhuaha  45  45  45  47  47  ...  41  41  41  45  16\n",
              "\n",
              "[19239 rows x 27 columns]"
            ]
          },
          "execution_count": 66,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "players_22[columns1]"
      ],
      "id": "d1ee6fab"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "sFJSLh0u0MRo"
      },
      "outputs": [],
      "source": [
        "y = players_22['overall']"
      ],
      "id": "sFJSLh0u0MRo"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "JMZV4Zrw0NYs"
      },
      "outputs": [],
      "source": [
        "X = players_22.drop('overall', axis=1)"
      ],
      "id": "JMZV4Zrw0NYs"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "cZtS0wWx0P1h"
      },
      "outputs": [],
      "source": [],
      "id": "cZtS0wWx0P1h"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "7e5877b9"
      },
      "outputs": [],
      "source": [
        "players_22_scaled = pd.DataFrame(scaler.fit_transform(X), columns=X.columns)"
      ],
      "id": "7e5877b9"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MYJMY_iiYkRT",
        "outputId": "f3c94797-270c-4c1e-c831-6d4d9c80b02a"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-bf2df673-c896-4573-9d57-6653cdabeea1\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>potential</th>\n",
              "      <th>value_eur</th>\n",
              "      <th>wage_eur</th>\n",
              "      <th>age</th>\n",
              "      <th>height_cm</th>\n",
              "      <th>...</th>\n",
              "      <th>body_type_Normal (185+)</th>\n",
              "      <th>body_type_Stocky (170-)</th>\n",
              "      <th>body_type_Stocky (170-185)</th>\n",
              "      <th>body_type_Stocky (185+)</th>\n",
              "      <th>body_type_Unique</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>3.601780</td>\n",
              "      <td>9.889601</td>\n",
              "      <td>15.998022</td>\n",
              "      <td>1.851089</td>\n",
              "      <td>-1.646467</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.53136</td>\n",
              "      <td>-0.071186</td>\n",
              "      <td>-0.173148</td>\n",
              "      <td>-0.137109</td>\n",
              "      <td>11.851719</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>3.437470</td>\n",
              "      <td>15.350958</td>\n",
              "      <td>13.425844</td>\n",
              "      <td>1.429869</td>\n",
              "      <td>0.539166</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.53136</td>\n",
              "      <td>-0.071186</td>\n",
              "      <td>-0.173148</td>\n",
              "      <td>-0.137109</td>\n",
              "      <td>11.851719</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3.273160</td>\n",
              "      <td>5.546836</td>\n",
              "      <td>13.425844</td>\n",
              "      <td>2.272309</td>\n",
              "      <td>0.830584</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.53136</td>\n",
              "      <td>-0.071186</td>\n",
              "      <td>-0.173148</td>\n",
              "      <td>-0.137109</td>\n",
              "      <td>11.851719</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3.273160</td>\n",
              "      <td>16.601147</td>\n",
              "      <td>13.425844</td>\n",
              "      <td>0.798039</td>\n",
              "      <td>-0.917923</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.53136</td>\n",
              "      <td>-0.071186</td>\n",
              "      <td>-0.173148</td>\n",
              "      <td>-0.137109</td>\n",
              "      <td>11.851719</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>3.273160</td>\n",
              "      <td>16.140551</td>\n",
              "      <td>17.541329</td>\n",
              "      <td>1.008649</td>\n",
              "      <td>-0.043669</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.53136</td>\n",
              "      <td>-0.071186</td>\n",
              "      <td>-0.173148</td>\n",
              "      <td>-0.137109</td>\n",
              "      <td>11.851719</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19234</th>\n",
              "      <td>-3.134932</td>\n",
              "      <td>-0.365905</td>\n",
              "      <td>-0.412474</td>\n",
              "      <td>-0.676231</td>\n",
              "      <td>-0.189378</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.53136</td>\n",
              "      <td>-0.071186</td>\n",
              "      <td>-0.173148</td>\n",
              "      <td>-0.137109</td>\n",
              "      <td>-0.084376</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19235</th>\n",
              "      <td>-1.984762</td>\n",
              "      <td>-0.360641</td>\n",
              "      <td>-0.438196</td>\n",
              "      <td>-1.308061</td>\n",
              "      <td>-0.917923</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.53136</td>\n",
              "      <td>-0.071186</td>\n",
              "      <td>-0.173148</td>\n",
              "      <td>-0.137109</td>\n",
              "      <td>-0.084376</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19236</th>\n",
              "      <td>-2.642002</td>\n",
              "      <td>-0.361957</td>\n",
              "      <td>-0.438196</td>\n",
              "      <td>-0.886841</td>\n",
              "      <td>-0.480796</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.53136</td>\n",
              "      <td>-0.071186</td>\n",
              "      <td>-0.173148</td>\n",
              "      <td>-0.137109</td>\n",
              "      <td>-0.084376</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19237</th>\n",
              "      <td>-1.820452</td>\n",
              "      <td>-0.360641</td>\n",
              "      <td>-0.438196</td>\n",
              "      <td>-1.308061</td>\n",
              "      <td>-1.209340</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.53136</td>\n",
              "      <td>-0.071186</td>\n",
              "      <td>-0.173148</td>\n",
              "      <td>-0.137109</td>\n",
              "      <td>-0.084376</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19238</th>\n",
              "      <td>-1.820452</td>\n",
              "      <td>-0.360641</td>\n",
              "      <td>-0.438196</td>\n",
              "      <td>-1.308061</td>\n",
              "      <td>-2.083593</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.53136</td>\n",
              "      <td>-0.071186</td>\n",
              "      <td>-0.173148</td>\n",
              "      <td>-0.137109</td>\n",
              "      <td>-0.084376</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>19239 rows × 3596 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-bf2df673-c896-4573-9d57-6653cdabeea1')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-bf2df673-c896-4573-9d57-6653cdabeea1 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-bf2df673-c896-4573-9d57-6653cdabeea1');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-c4a6fd71-282e-4842-9cbc-98bb92567140\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c4a6fd71-282e-4842-9cbc-98bb92567140')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-c4a6fd71-282e-4842-9cbc-98bb92567140 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "       potential  value_eur   wage_eur       age  height_cm  ...  \\\n",
              "0       3.601780   9.889601  15.998022  1.851089  -1.646467  ...   \n",
              "1       3.437470  15.350958  13.425844  1.429869   0.539166  ...   \n",
              "2       3.273160   5.546836  13.425844  2.272309   0.830584  ...   \n",
              "3       3.273160  16.601147  13.425844  0.798039  -0.917923  ...   \n",
              "4       3.273160  16.140551  17.541329  1.008649  -0.043669  ...   \n",
              "...          ...        ...        ...       ...        ...  ...   \n",
              "19234  -3.134932  -0.365905  -0.412474 -0.676231  -0.189378  ...   \n",
              "19235  -1.984762  -0.360641  -0.438196 -1.308061  -0.917923  ...   \n",
              "19236  -2.642002  -0.361957  -0.438196 -0.886841  -0.480796  ...   \n",
              "19237  -1.820452  -0.360641  -0.438196 -1.308061  -1.209340  ...   \n",
              "19238  -1.820452  -0.360641  -0.438196 -1.308061  -2.083593  ...   \n",
              "\n",
              "       body_type_Normal (185+)  body_type_Stocky (170-)  \\\n",
              "0                     -0.53136                -0.071186   \n",
              "1                     -0.53136                -0.071186   \n",
              "2                     -0.53136                -0.071186   \n",
              "3                     -0.53136                -0.071186   \n",
              "4                     -0.53136                -0.071186   \n",
              "...                        ...                      ...   \n",
              "19234                 -0.53136                -0.071186   \n",
              "19235                 -0.53136                -0.071186   \n",
              "19236                 -0.53136                -0.071186   \n",
              "19237                 -0.53136                -0.071186   \n",
              "19238                 -0.53136                -0.071186   \n",
              "\n",
              "       body_type_Stocky (170-185)  body_type_Stocky (185+)  body_type_Unique  \n",
              "0                       -0.173148                -0.137109         11.851719  \n",
              "1                       -0.173148                -0.137109         11.851719  \n",
              "2                       -0.173148                -0.137109         11.851719  \n",
              "3                       -0.173148                -0.137109         11.851719  \n",
              "4                       -0.173148                -0.137109         11.851719  \n",
              "...                           ...                      ...               ...  \n",
              "19234                   -0.173148                -0.137109         -0.084376  \n",
              "19235                   -0.173148                -0.137109         -0.084376  \n",
              "19236                   -0.173148                -0.137109         -0.084376  \n",
              "19237                   -0.173148                -0.137109         -0.084376  \n",
              "19238                   -0.173148                -0.137109         -0.084376  \n",
              "\n",
              "[19239 rows x 3596 columns]"
            ]
          },
          "execution_count": 70,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "players_22_scaled"
      ],
      "id": "MYJMY_iiYkRT"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vwUgqE-nEka3"
      },
      "source": [
        "## **Model Training and Evaluation**"
      ],
      "id": "vwUgqE-nEka3"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "zl5Odu8tJWnq"
      },
      "outputs": [],
      "source": [
        "feature_corr = corr_matrix_21['overall']"
      ],
      "id": "zl5Odu8tJWnq"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ojvN7WEd53vm"
      },
      "outputs": [],
      "source": [
        "top_features=feature_corr.sort_values(ascending=False).head(10)"
      ],
      "id": "ojvN7WEd53vm"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Q5GcXwfUytK_",
        "outputId": "650f7275-c512-4196-a979-8bb30a02123b"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "overall                1.000000\n",
              "movement_reactions     0.867234\n",
              "mentality_composure    0.705252\n",
              "passing                0.662090\n",
              "potential              0.636366\n",
              "release_clause_eur     0.608200\n",
              "dribbling              0.596558\n",
              "wage_eur               0.589060\n",
              "power_shot_power       0.558372\n",
              "value_eur              0.555192\n",
              "Name: overall, dtype: float64"
            ]
          },
          "execution_count": 80,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "top_features"
      ],
      "id": "Q5GcXwfUytK_"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "cuTAcJP5h8hQ"
      },
      "outputs": [],
      "source": [
        "top_features_list = top_features.index.tolist()\n",
        "top_features_list.remove('overall')\n",
        "\n",
        "X_train_subset = X_train[top_features_list]\n",
        "X_test_subset = X_test[top_features_list]"
      ],
      "id": "cuTAcJP5h8hQ"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "t1_J5e_kRINa"
      },
      "outputs": [],
      "source": [
        "models = [\n",
        "    (\"Linear Regression\", LinearRegression()),\n",
        "    (\"Decision Tree\", DecisionTreeRegressor()),\n",
        "    (\"Random Forest\", RandomForestRegressor(n_estimators=100, random_state=42)),\n",
        "    (\"xGB Boost\", xgb.XGBRegressor(n_estimators=100, random_state=42)),\n",
        "    (\"Gradient Boost\", GradientBoostingRegressor(n_estimators=100, random_state=42))\n",
        "]\n"
      ],
      "id": "t1_J5e_kRINa"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MbhUTgF2RKub",
        "outputId": "331e8e07-761f-4b99-b9da-45c42f144e1c"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Linear Regression: Cross-validation scores: [0.83992965 0.83414798 0.84586767 0.83948329 0.84201037]\n",
            "Decision Tree: Cross-validation scores: [0.93796422 0.94175625 0.9455883  0.9436934  0.94365715]\n",
            "Random Forest: Cross-validation scores: [0.9735515  0.97657532 0.97427576 0.9723213  0.97600725]\n",
            "xGB Boost: Cross-validation scores: [0.97324955 0.97592799 0.97373878 0.97176624 0.97393067]\n",
            "Gradient Boost: Cross-validation scores: [0.95401565 0.95342344 0.95512552 0.95199809 0.95392265]\n"
          ]
        }
      ],
      "source": [
        "for name, model in models:\n",
        "    # Train model\n",
        "    model.fit(X_train_subset, y_train)\n",
        "\n",
        "    # Cross-validation\n",
        "    scores = cross_val_score(model, X_train_subset, y_train, cv=5)\n",
        "\n",
        "    print(f\"{name}: Cross-validation scores: {scores}\")"
      ],
      "id": "MbhUTgF2RKub"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sAcoo9nktXmX",
        "outputId": "d4ac1b0b-8f17-4807-a1f7-b5f973c05500"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Linear Regression: MAE = 2.1732623509792806, RMSE = 2.8040186601509656\n",
            "Decision Tree: MAE = 0.7582475587226181, RMSE = 1.61143643023821\n",
            "Random Forest: MAE = 0.6226497756664028, RMSE = 1.0732785722446354\n",
            "xGB Boost: MAE = 0.7293554131353585, RMSE = 1.076197113310028\n",
            "Gradient Boost: MAE = 1.0800066604462477, RMSE = 1.4779627254244605\n"
          ]
        }
      ],
      "source": [
        "for name, model in models:\n",
        "    # Predict on test set\n",
        "    y_pred = model.predict(X_test_subset)\n",
        "\n",
        "    # Calculate MAE and RMSE\n",
        "    mae = mean_absolute_error(y_test, y_pred)\n",
        "    rmse = np.sqrt(mean_squared_error(y_test, y_pred))\n",
        "\n",
        "    print(f\"{name}: MAE = {mae}, RMSE = {rmse}\")"
      ],
      "id": "sAcoo9nktXmX"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "IkHXFpgM_Jlg"
      },
      "outputs": [],
      "source": [
        "random_forest = RandomForestRegressor()\n",
        "random_forest_params = {\n",
        "    'n_estimators': [50, 100, 200],\n",
        "    'max_depth': [None, 10, 20, 30],\n",
        "    'min_samples_split': [2, 5, 10]\n",
        "}\n",
        "\n",
        "gradient_boost = GradientBoostingRegressor()\n",
        "gradient_boost_params = {\n",
        "    'n_estimators': [50, 100, 200],\n",
        "    'learning_rate': [0.01, 0.1, 0.2],\n",
        "    'max_depth': [3, 5, 7]\n",
        "}"
      ],
      "id": "IkHXFpgM_Jlg"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "7zTyAYactCf8"
      },
      "outputs": [],
      "source": [
        "xgb_model = xgb.XGBRegressor()\n",
        "xgb_params = {\n",
        "    'n_estimators': [50, 100, 200],\n",
        "    'learning_rate': [0.01, 0.1, 0.2],\n",
        "    'max_depth': [3, 5, 7]\n",
        "}\n"
      ],
      "id": "7zTyAYactCf8"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "nnUUDoFgtEfq"
      },
      "outputs": [],
      "source": [
        "gradient_boost = GradientBoostingRegressor()\n",
        "gradient_boost_params = {\n",
        "    'n_estimators': [50, 100, 200],\n",
        "    'learning_rate': [0.01, 0.1, 0.2],\n",
        "    'max_depth': [3, 5, 7]\n",
        "}"
      ],
      "id": "nnUUDoFgtEfq"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "IOatsXzotICM"
      },
      "outputs": [],
      "source": [
        "models_and_params = [\n",
        "    (random_forest, random_forest_params, \"Random Forest\"),\n",
        "    (xgb_model, xgb_params, \"XGB Boost\"),\n",
        "    (gradient_boost, gradient_boost_params, \"Gradient Boost\")\n",
        "]"
      ],
      "id": "IOatsXzotICM"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true,
          "base_uri": "https://localhost:8080/"
        },
        "id": "QBGpzLWk_OnH",
        "outputId": "fb19155f-ea02-43b1-f165-c3b74729c533"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Fitting 5 folds for each of 36 candidates, totalling 180 fits\n",
            "\n",
            "Random Forest - Best Parameters: {'max_depth': 30, 'min_samples_split': 2, 'n_estimators': 100}\n",
            "Random Forest - MAE = 0.6206861968857219, RMSE = 1.0675657582519846\n",
            "Fitting 5 folds for each of 27 candidates, totalling 135 fits\n",
            "\n",
            "XGB Boost - Best Parameters: {'learning_rate': 0.1, 'max_depth': 7, 'n_estimators': 200}\n",
            "XGB Boost - MAE = 0.6667734369120393, RMSE = 1.0226913021594195\n",
            "Fitting 5 folds for each of 27 candidates, totalling 135 fits\n",
            "\n",
            "Gradient Boost - Best Parameters: {'learning_rate': 0.1, 'max_depth': 7, 'n_estimators': 200}\n",
            "Gradient Boost - MAE = 0.6671942954359621, RMSE = 1.0325432102389376\n"
          ]
        }
      ],
      "source": [
        "for model, param_grid, name in models_and_params:\n",
        "    grid_search = GridSearchCV(estimator=model, param_grid=param_grid, cv=5, scoring='neg_mean_squared_error', n_jobs=-1, verbose=2)\n",
        "    grid_search.fit(X_train_subset, y_train)\n",
        "\n",
        "    best_params = grid_search.best_params_\n",
        "    best_model = grid_search.best_estimator_\n",
        "\n",
        "    print(f\"\\n{name} - Best Parameters: {best_params}\")\n",
        "\n",
        "    # Evaluate on the test set\n",
        "    y_pred = best_model.predict(X_test_subset)\n",
        "    mae = mean_absolute_error(y_test, y_pred)\n",
        "    rmse = np.sqrt(mean_squared_error(y_test, y_pred))\n",
        "\n",
        "    print(f\"{name} - MAE = {mae}, RMSE = {rmse}\")"
      ],
      "id": "QBGpzLWk_OnH"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "Od_jcBPDym7m"
      },
      "outputs": [],
      "source": [
        "best_random_forest = RandomForestRegressor(n_estimators=200, max_depth=20, min_samples_split=2)\n",
        "best_xgb_model = xgb.XGBRegressor(n_estimators=200, learning_rate=0.1, max_depth=7)\n",
        "best_gradient_boost = GradientBoostingRegressor(n_estimators=200, learning_rate=0.1, max_depth=7)\n"
      ],
      "id": "Od_jcBPDym7m"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "l4A-7TRFzKz0"
      },
      "outputs": [],
      "source": [
        "voting_regressor = VotingRegressor(estimators=[\n",
        "    ('random_forest', best_random_forest),\n",
        "    ('xgb', best_xgb_model),\n",
        "    ('gradient_boost', best_gradient_boost)\n",
        "])"
      ],
      "id": "l4A-7TRFzKz0"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "sl3UcGALzwmB",
        "outputId": "2db49fcf-4104-4a1a-c665-1a2c6229a244"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>VotingRegressor(estimators=[(&#x27;random_forest&#x27;,\n",
              "                             RandomForestRegressor(max_depth=20,\n",
              "                                                   n_estimators=200)),\n",
              "                            (&#x27;xgb&#x27;,\n",
              "                             XGBRegressor(base_score=None, booster=None,\n",
              "                                          callbacks=None,\n",
              "                                          colsample_bylevel=None,\n",
              "                                          colsample_bynode=None,\n",
              "                                          colsample_bytree=None, device=None,\n",
              "                                          early_stopping_rounds=None,\n",
              "                                          enable_categorical=False,\n",
              "                                          eval_metric=None, feature_types=None,\n",
              "                                          gamma=None, grow_poli...\n",
              "                                          learning_rate=0.1, max_bin=None,\n",
              "                                          max_cat_threshold=None,\n",
              "                                          max_cat_to_onehot=None,\n",
              "                                          max_delta_step=None, max_depth=7,\n",
              "                                          max_leaves=None,\n",
              "                                          min_child_weight=None, missing=nan,\n",
              "                                          monotone_constraints=None,\n",
              "                                          multi_strategy=None, n_estimators=200,\n",
              "                                          n_jobs=None, num_parallel_tree=None,\n",
              "                                          random_state=None, ...)),\n",
              "                            (&#x27;gradient_boost&#x27;,\n",
              "                             GradientBoostingRegressor(max_depth=7,\n",
              "                                                       n_estimators=200))])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" ><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">VotingRegressor</label><div class=\"sk-toggleable__content\"><pre>VotingRegressor(estimators=[(&#x27;random_forest&#x27;,\n",
              "                             RandomForestRegressor(max_depth=20,\n",
              "                                                   n_estimators=200)),\n",
              "                            (&#x27;xgb&#x27;,\n",
              "                             XGBRegressor(base_score=None, booster=None,\n",
              "                                          callbacks=None,\n",
              "                                          colsample_bylevel=None,\n",
              "                                          colsample_bynode=None,\n",
              "                                          colsample_bytree=None, device=None,\n",
              "                                          early_stopping_rounds=None,\n",
              "                                          enable_categorical=False,\n",
              "                                          eval_metric=None, feature_types=None,\n",
              "                                          gamma=None, grow_poli...\n",
              "                                          learning_rate=0.1, max_bin=None,\n",
              "                                          max_cat_threshold=None,\n",
              "                                          max_cat_to_onehot=None,\n",
              "                                          max_delta_step=None, max_depth=7,\n",
              "                                          max_leaves=None,\n",
              "                                          min_child_weight=None, missing=nan,\n",
              "                                          monotone_constraints=None,\n",
              "                                          multi_strategy=None, n_estimators=200,\n",
              "                                          n_jobs=None, num_parallel_tree=None,\n",
              "                                          random_state=None, ...)),\n",
              "                            (&#x27;gradient_boost&#x27;,\n",
              "                             GradientBoostingRegressor(max_depth=7,\n",
              "                                                       n_estimators=200))])</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><label>random_forest</label></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestRegressor</label><div class=\"sk-toggleable__content\"><pre>RandomForestRegressor(max_depth=20, n_estimators=200)</pre></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><label>xgb</label></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">XGBRegressor</label><div class=\"sk-toggleable__content\"><pre>XGBRegressor(base_score=None, booster=None, callbacks=None,\n",
              "             colsample_bylevel=None, colsample_bynode=None,\n",
              "             colsample_bytree=None, device=None, early_stopping_rounds=None,\n",
              "             enable_categorical=False, eval_metric=None, feature_types=None,\n",
              "             gamma=None, grow_policy=None, importance_type=None,\n",
              "             interaction_constraints=None, learning_rate=0.1, max_bin=None,\n",
              "             max_cat_threshold=None, max_cat_to_onehot=None,\n",
              "             max_delta_step=None, max_depth=7, max_leaves=None,\n",
              "             min_child_weight=None, missing=nan, monotone_constraints=None,\n",
              "             multi_strategy=None, n_estimators=200, n_jobs=None,\n",
              "             num_parallel_tree=None, random_state=None, ...)</pre></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><label>gradient_boost</label></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" ><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GradientBoostingRegressor</label><div class=\"sk-toggleable__content\"><pre>GradientBoostingRegressor(max_depth=7, n_estimators=200)</pre></div></div></div></div></div></div></div></div></div></div>"
            ],
            "text/plain": [
              "VotingRegressor(estimators=[('random_forest',\n",
              "                             RandomForestRegressor(max_depth=20,\n",
              "                                                   n_estimators=200)),\n",
              "                            ('xgb',\n",
              "                             XGBRegressor(base_score=None, booster=None,\n",
              "                                          callbacks=None,\n",
              "                                          colsample_bylevel=None,\n",
              "                                          colsample_bynode=None,\n",
              "                                          colsample_bytree=None, device=None,\n",
              "                                          early_stopping_rounds=None,\n",
              "                                          enable_categorical=False,\n",
              "                                          eval_metric=None, feature_types=None,\n",
              "                                          gamma=None, grow_poli...\n",
              "                                          learning_rate=0.1, max_bin=None,\n",
              "                                          max_cat_threshold=None,\n",
              "                                          max_cat_to_onehot=None,\n",
              "                                          max_delta_step=None, max_depth=7,\n",
              "                                          max_leaves=None,\n",
              "                                          min_child_weight=None, missing=nan,\n",
              "                                          monotone_constraints=None,\n",
              "                                          multi_strategy=None, n_estimators=200,\n",
              "                                          n_jobs=None, num_parallel_tree=None,\n",
              "                                          random_state=None, ...)),\n",
              "                            ('gradient_boost',\n",
              "                             GradientBoostingRegressor(max_depth=7,\n",
              "                                                       n_estimators=200))])"
            ]
          },
          "execution_count": 92,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "voting_regressor.fit(X_train_subset, y_train)"
      ],
      "id": "sl3UcGALzwmB"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "DIRdencC0GsR"
      },
      "outputs": [],
      "source": [
        "y_pred = voting_regressor.predict(X_test_subset)"
      ],
      "id": "DIRdencC0GsR"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "RcDn2-KQ0O_I",
        "outputId": "e56eac47-44a4-4a7c-a408-c2c680d4ad1d"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Voting Ensemble Model: MAE = 0.6227347679539176, RMSE = 0.9984294631910886\n"
          ]
        }
      ],
      "source": [
        "mae_voting = mean_absolute_error(y_test, y_pred)\n",
        "rmse_voting = np.sqrt(mean_squared_error(y_test, y_pred))\n",
        "print(f\"Voting Ensemble Model: MAE = {mae_voting}, RMSE = {rmse_voting}\")"
      ],
      "id": "RcDn2-KQ0O_I"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "K-E4sHSm0oFW"
      },
      "outputs": [],
      "source": [
        "X_test_22 = players_22_scaled[X_train_subset.columns]"
      ],
      "id": "K-E4sHSm0oFW"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "tHjMuhf_1Ku6"
      },
      "outputs": [],
      "source": [
        "y_pred_22 = voting_regressor.predict(X_test_22)"
      ],
      "id": "tHjMuhf_1Ku6"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "y7xdi6yK1KND",
        "outputId": "33b678f0-94c3-452b-f756-37b00ed8edcb"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "MAE on players_22: 14.040019690601696\n",
            "RMSE on players_22: 15.56424635046679\n"
          ]
        }
      ],
      "source": [
        "mae_22 = mean_absolute_error(y, y_pred_22)\n",
        "rmse_22 = np.sqrt(mean_squared_error(y, y_pred_22))\n",
        "\n",
        "print(f\"MAE on players_22: {mae_22}\")\n",
        "print(f\"RMSE on players_22: {rmse_22}\")"
      ],
      "id": "y7xdi6yK1KND"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 266
        },
        "id": "_e-UUnyTSddB",
        "outputId": "02881cb8-dd5e-4f32-b7a9-4aa801e8487f"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "data = pd.DataFrame({'Real': y, 'Predicted': y_pred_22})\n",
        "\n",
        "sns.scatterplot(data=data, x='Real', y='Predicted')\n",
        "plt.plot([y.min(), y.max()], [y.min(), y.max()], 'r--', lw=3)\n",
        "plt.xlabel('Real')\n",
        "plt.ylabel('Predicted')\n",
        "plt.show()"
      ],
      "id": "_e-UUnyTSddB"
    }
  ],
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.11.4"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}